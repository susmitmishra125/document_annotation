{
  "name" : "2021.acl-long.206.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Automated Concatenation of Embeddings for Structured Prediction",
    "authors" : [ "Xinyu Wang", "Yong Jiang", "Nguyen Bach", "Tao Wang", "Zhongqiang Huang", "Fei Huang", "Kewei Tu" ],
    "emails" : [ "wangxy1@shanghaitech.edu.cn,", "tukw@shanghaitech.edu.cn,", "yongjiang.jy@alibaba-inc.com", "nguyen.bach@alibaba-inc.com", "leeo.wangt@alibaba-inc.com", "z.huang@alibaba-inc.com", "f.huang@alibaba-inc.com" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing, pages 2643–2660\nAugust 1–6, 2021. ©2021 Association for Computational Linguistics\n2643"
    }, {
      "heading" : "1 Introduction",
      "text" : "Recent developments on pretrained contextualized embeddings have significantly improved the performance of structured prediction tasks in natural\n∗Yong Jiang and Kewei Tu are the corresponding authors. ‡: This work was conducted when Xinyu Wang was interning at Alibaba DAMO Academy.\n1Our code is publicly available at https://github. com/Alibaba-NLP/ACE.\nlanguage processing. Approaches based on contextualized embeddings, such as ELMo (Peters et al., 2018), Flair (Akbik et al., 2018), BERT (Devlin et al., 2019), and XLM-R (Conneau et al., 2020), have been consistently raising the state-of-the-art for various structured prediction tasks. Concurrently, research has also showed that word representations based on the concatenation of multiple pretrained contextualized embeddings and traditional non-contextualized embeddings (such as word2vec (Mikolov et al., 2013) and character embeddings (Santos and Zadrozny, 2014)) can further improve performance (Peters et al., 2018; Akbik et al., 2018; Straková et al., 2019; Wang et al., 2020b). Given the ever-increasing number of embedding learning methods that operate on different granularities (e.g., word, subword, or character level) and with different model architectures, choosing the best embeddings to concatenate for a specific task becomes non-trivial, and exploring all possible concatenations can be prohibitively demanding in computing resources.\nNeural architecture search (NAS) is an active area of research in deep learning to automatically search for better model architectures, and has achieved state-of-the-art performance on various tasks in computer vision, such as image classification (Real et al., 2019), semantic segmentation (Liu et al., 2019a), and object detection (Ghiasi et al., 2019). In natural language processing, NAS has been successfully applied to find better RNN structures (Zoph and Le, 2017; Pham et al., 2018b) and recently better transformer structures (So et al., 2019; Zhu et al., 2020). In this paper, we propose Automated Concatenation of Embeddings (ACE) to automate the process of finding better concatenations of embeddings for structured prediction tasks. ACE is formulated as an NAS problem. In this approach, an iterative search process is guided by a controller based on its belief that models the ef-\nfectiveness of individual embedding candidates in consideration for a specific task. At each step, the controller samples a concatenation of embeddings according to the belief model and then feeds the concatenated word representations as inputs to a task model, which in turn is trained on the task dataset and returns the model accuracy as a reward signal to update the belief model. We use the policy gradient algorithm (Williams, 1992) in reinforcement learning (Sutton and Barto, 1992) to solve the optimization problem. In order to improve the efficiency of the search process, we also design a special reward function by accumulating all the rewards based on the transformation between the current concatenation and all previously sampled concatenations.\nOur approach is different from previous work on NAS in the following aspects:\n1. Unlike most previous work, we focus on searching for better word representations rather than better model architectures.\n2. We design a novel search space for the embedding concatenation search. Instead of using RNN as in previous work of Zoph and Le (2017), we design a more straightforward controller to generate the embedding concatenation. We design a novel reward function in the objective of optimization to better evaluate the effectiveness of each concatenated embeddings.\n3. ACE achieves high accuracy without the need for retraining the task model, which is typically required in other NAS approaches.\n4. Our approach is efficient and practical. Although ACE is formulated in a NAS framework, ACE can find a strong word representation on a single GPU with only a few GPU-hours for structured prediction tasks. In comparison, a lot of NAS approaches require dozens or even thousands of GPU-hours to search for good neural architectures for their corresponding tasks.\nEmpirical results show that ACE outperforms strong baselines. Furthermore, when ACE is applied to concatenate pretrained contextualized embeddings fine-tuned on specific tasks, we can achieve state-of-the-art accuracy on 6 structured prediction tasks including Named Entity Recognition (Sundheim, 1995), Part-Of-Speech tagging (DeRose, 1988), chunking (Tjong Kim Sang and Buchholz, 2000), aspect extraction (Hu and Liu,\n2004), syntactic dependency parsing (Tesnière, 1959) and semantic dependency parsing (Oepen et al., 2014) over 21 datasets. Besides, we also analyze the advantage of ACE and reward function design over the baselines and show the advantage of ACE over ensemble models."
    }, {
      "heading" : "2 Related Work",
      "text" : ""
    }, {
      "heading" : "2.1 Embeddings",
      "text" : "Non-contextualized embeddings, such as word2vec (Mikolov et al., 2013), GloVe (Pennington et al., 2014), and fastText (Bojanowski et al., 2017), help lots of NLP tasks. Character embeddings (Santos and Zadrozny, 2014) are trained together with the task and applied in many structured prediction tasks (Ma and Hovy, 2016; Lample et al., 2016; Dozat and Manning, 2018). For pretrained contextualized embeddings, ELMo (Peters et al., 2018), a pretrained contextualized word embedding generated with multiple Bidirectional LSTM layers, significantly outperforms previous state-of-the-art approaches on several NLP tasks. Following this idea, Akbik et al. (2018) proposed Flair embeddings, which is a kind of contextualized character embeddings and achieved strong performance in sequence labeling tasks. Recently, Devlin et al. (2019) proposed BERT, which encodes contextualized sub-word information by Transformers (Vaswani et al., 2017) and significantly improves the performance on a lot of NLP tasks. Much research such as RoBERTa (Liu et al., 2019c) has focused on improving BERT model’s performance through stronger masking strategies. Moreover, multilingual contextualized embeddings become popular. Pires et al. (2019) and Wu and Dredze (2019) showed that Multilingual BERT (M-BERT) could learn a good multilingual representation effectively with strong cross-lingual zero-shot transfer performance in various tasks. Conneau et al. (2020) proposed XLM-R, which is trained on a larger multilingual corpus and significantly outperforms M-BERT on various multilingual tasks."
    }, {
      "heading" : "2.2 Neural Architecture Search",
      "text" : "Recent progress on deep learning has shown that network architecture design is crucial to the model performance. However, designing a strong neural architecture for each task requires enormous efforts, high level of knowledge, and experiences over the task domain. Therefore, automatic design of neural architecture is desired. A crucial part of\nNAS is search space design, which defines the discoverable NAS space. Previous work (Baker et al., 2017; Zoph and Le, 2017; Xie and Yuille, 2017) designs a global search space (Elsken et al., 2019) which incorporates structures from hand-crafted architectures. For example, Zoph and Le (2017) designed a chained-structured search space with skip connections. The global search space usually has a considerable degree of freedom. For example, the approach of Zoph and Le (2017) takes 22,400 GPUhours to search on CIFAR-10 dataset. Based on the observation that existing hand-crafted architectures contain repeated structures (Szegedy et al., 2016; He et al., 2016; Huang et al., 2017), Zoph et al. (2018) explored cell-based search space which can reduce the search time to 2,000 GPU-hours.\nIn recent NAS research, reinforcement learning and evolutionary algorithms are the most usual approaches. In reinforcement learning, the agent’s actions are the generation of neural architectures and the action space is identical to the search space. Previous work usually applies an RNN layer (Zoph and Le, 2017; Zhong et al., 2018; Zoph et al., 2018) or use Markov Decision Process (Baker et al., 2017) to decide the hyper-parameter of each structure and decide the input order of each structure. Evolutionary algorithms have been applied to architecture search for many decades (Miller et al., 1989; Angeline et al., 1994; Stanley and Miikkulainen, 2002; Floreano et al., 2008; Jozefowicz et al., 2015). The algorithm repeatedly generates new populations through recombination and mutation operations and selects survivors through competing among the population. Recent work with evolutionary algorithms differ in the method on parent/survivor selection and population generation. For example, Real et al. (2017), Liu et al. (2018a), Wistuba (2018) and Real et al. (2019) applied tournament selection (Goldberg and Deb, 1991) for the parent selection while Xie and Yuille (2017) keeps all parents. Suganuma et al. (2017) and Elsken et al. (2018) chose the best model while Real et al. (2019) chose several latest models as survivors."
    }, {
      "heading" : "3 Automated Concatenation of Embeddings",
      "text" : "In ACE, a task model and a controller interact with each other repeatedly. The task model predicts the task output, while the controller searches for better embedding concatenation as the word representation for the task model to achieve higher accuracy.\nGiven an embedding concatenation generated from the controller, the task model is trained over the task data and returns a reward to the controller. The controller receives the reward to update its parameter and samples a new embedding concatenation for the task model. Figure 1 shows the general architecture of our approach."
    }, {
      "heading" : "3.1 Task Model",
      "text" : "For the task model, we emphasis on sequencestructured and graph-structured outputs. Given a structured prediction task with input sentence x and structured output y, we can calculate the probability distribution P (y|x) by:\nP (y|x) = exp (Score(x,y))∑ y′∈Y(x) exp (Score(x,y′))\nwhere Y(x) represents all possible output structures given the input sentence x. Depending on different structured prediction tasks, the output structure y can be label sequences, trees, graphs or other structures. In this paper, we use sequencestructured and graph-structured outputs as two exemplar structured prediction tasks. We use BiLSTM-CRF model (Ma and Hovy, 2016; Lample et al., 2016) for sequence-structured outputs and use BiLSTM-Biaffine model (Dozat and Manning, 2017) for graph-structured outputs:\nP seq(y|x) = BiLSTM-CRF(V ,y) P graph(y|x) = BiLSTM-Biaffine(V ,y)\nwhere V = [v1; · · · ;vn], V ∈ Rd×n is a matrix of the word representations for the input sentence x with n words, d is the hidden size of the concatenation of all embeddings. The word representation vi of i-th word is a concatenation of L types of word embeddings:\nvli = embed l i(x); vi = [v 1 i ;v 2 i ; . . . ;v L i ]\nwhere embedl is the model of l-th embeddings, vi ∈ Rd, vli ∈ Rd l . dl is the hidden size of embedl."
    }, {
      "heading" : "3.2 Search Space Design",
      "text" : "The neural architecture search space can be represented as a set of neural networks (Elsken et al., 2019). A neural network can be represented as a directed acyclic graph with a set of nodes and directed edges. Each node represents an operation, while each edge represents the inputs and outputs between these nodes. In ACE, we represent each\nembedding candidate as a node. The input to the nodes is the input sentence x, and the outputs are the embeddings vl. Since we concatenate the embeddings as the word representation of the task model, there is no connection between nodes in our search space. Therefore, the search space can be significantly reduced. For each node, there are a lot of options to extract word features. Taking BERT embeddings as an example, Devlin et al. (2019) concatenated the last four layers as word features while Kondratyuk and Straka (2019) applied a weighted sum of all twelve layers. However, the empirical results (Devlin et al., 2019) do not show a significant difference in accuracy. We follow the typical usage for each embedding to further reduce the search space. As a result, each embedding only has a fixed operation and the resulting search space contains 2L−1 possible combinations of nodes.\nIn NAS, weight sharing (Pham et al., 2018a) shares the weight of structures in training different neural architectures to reduce the training cost. In comparison, we fixed the weight of pretrained embedding candidates in ACE except for the character embeddings. Instead of sharing the parameters of the embeddings, we share the parameters of the task models at each step of search. However, the hidden size of word representation varies over the concatenations, making the weight sharing of structured prediction models difficult. Instead of deciding whether each node exists in the graph, we keep all nodes in the search space and add an additional operation for each node to indicate whether the embedding is masked out. To represent the selected concatenation, we use a binary vector a = [a1, · · · , al, · · · , aL] as an mask to mask out the embeddings which are not selected:\nvi = [v 1 i a1; . . . ;v l ial; . . . ;v L i aL] (1)\nwhere al is a binary variable. Since the input V is applied to a linear layer in the BiLSTM layer, multiplying the mask with the embeddings is equivalent to directly concatenating the selected embeddings:\nW>vi = L∑ l=1 W>l v l ial (2)\nwhere W=[W1;W2; . . . ;WL] and W∈Rd×h andWl∈Rd\nl×h. Therefore, the model weights can be shared after applying the embedding mask to all embedding candidates’ concatenation. Another\nbenefit of our search space design is that we can remove the unused embedding candidates and the corresponding weights inW for a lighter task model after the best concatenation is found by ACE."
    }, {
      "heading" : "3.3 Searching in the Space",
      "text" : "During search, the controller generates the embedding mask for the task model iteratively. We use parameters θ = [θ1; θ2; . . . ; θL] for the controller instead of using the RNN structure applied in previous approaches (Zoph and Le, 2017; Zoph et al., 2018). The probability distribution of selecting an concatenation a is P ctrl(a;θ) = ∏L l=1 P ctrl l (al; θl). Each element al of a is sampled independently from a Bernoulli distribution, which is defined as:\nP ctrll (al; θl)=\n{ σ(θl) al=1\n1−P ctrll (al=1; θl) al=0 (3)\nwhere σ is the sigmoid function. Given the mask, the task model is trained until convergence and returns an accuracy R on the development set. As the accuracy cannot be back-propagated to the controller, we use the reinforcement algorithm for optimization. The accuracy R is used as the reward signal to train the controller. The controller’s target is to maximize the expected reward J(θ) = EP ctrl(a;θ)[R] through the policy gradient method (Williams, 1992). In our approach, since calculating the exact expectation is intractable, the gradient of J(θ) is approximated by sampling only one selection following the distribution P ctrl(a;θ) at each step for training efficiency:\n∇θJ(θ) ≈ L∑ l=1 ∇θ logP ctrll (al; θl)(R− b) (4)\nwhere b is the baseline function to reduce the high variance of the update function. The baseline usually can be the highest accuracy during the search process. Instead of merely using the highest accuracy of development set over the search process as the baseline, we design a reward function on how each embedding candidate contributes to accuracy change by utilizing all searched concatenations’ development scores. We use a binary vector |at−ai| to represent the change between current embedding concatenation at at current time step t and ai at previous time step i. We then define the reward function as:\nrt = t−1∑ i=1 (Rt −Ri)|at − ai| (5)\nwhere rt is a vector with length L representing the reward of each embedding candidate. Rt and Ri are the reward at time step t and i. When the Hamming distance of two concatenations Hamm(at,ai) gets larger, the changed candidates’ contribution to the accuracy becomes less noticeable. The controller may be misled to reward a candidate that is not actually helpful. We apply a discount factor to reduce the reward for two concatenations with a large Hamming distance to alleviate this issue. Our final reward function is:\nrt= t−1∑ i=1 (Rt−Ri)γHamm(a t,ai)−1|at−ai| (6)\nwhere γ ∈ (0, 1). Eq. 4 is then reformulated as:\n∇θJt(θ) ≈ L∑ l=1 ∇θ logP ctrll (atl ; θl)rtl (7)"
    }, {
      "heading" : "3.4 Training",
      "text" : "To train the controller, we use a dictionary D to store the concatenations and the corresponding validation scores. At t = 1, we train the task model with all embedding candidates concatenated. From t = 2, we repeat the following steps until a maximum iteration T :\n1. Sample a concatenation at based on the probability distribution in Eq. 3.\n2. Train the task model with at following Eq. 1 and evaluate the model on the development set to get the accuracy Rt.\n3. Given the concatenation at, accuracy Rt and D, compute the gradient of the controller following Eq. 7 and update the parameters of controller.\n4. Add at and Rt into D, set t = t+ 1.\nWhen sampling at, we avoid selecting the previous concatenation at−1 and the all-zero vector (i.e., selecting no embedding). If at is in the dictionary D,\nwe compare the Rt with the value in the dictionary and keep the higher one."
    }, {
      "heading" : "4 Experiments",
      "text" : "We use ISO 639-1 language codes to represent languages in the table2."
    }, {
      "heading" : "4.1 Datasets and Configurations",
      "text" : "To show ACE’s effectiveness, we conduct extensive experiments on a variety of structured prediction tasks varying from syntactic tasks to semantic tasks. The tasks are named entity recognition (NER), PartOf-Speech (POS) tagging, Chunking, Aspect Extraction (AE), Syntactic Dependency Parsing (DP) and Semantic Dependency Parsing (SDP). The details of the 6 structured prediction tasks in our experiments are shown in below:\n• NER: We use the corpora of 4 languages from the CoNLL 2002 and 2003 shared task (Tjong Kim Sang, 2002; Tjong Kim Sang and De Meulder, 2003) with standard split.\n• POS Tagging: We use three datasets, Ritter11-TPOS (Ritter et al., 2011), ARK-Twitter (Gimpel et al., 2011; Owoputi et al., 2013) and Tweebankv2 (Liu et al., 2018b) datasets (Ritter, ARK and TB-v2 in simplification). We follow the dataset split of Nguyen et al. (2020).\n• Chunking: We use CoNLL 2000 (Tjong Kim Sang and Buchholz, 2000) for chunking. Since there is no standard development set for CoNLL 2000 dataset, we split 10% of the training data as the development set.\n• Aspect Extraction: Aspect extraction is a subtask of aspect-based sentiment analysis (Pontiki et al., 2014, 2015, 2016). The datasets are from the laptop and restaurant domain of SemEval\n2https://en.wikipedia.org/wiki/List_ of_ISO_639-1_codes\n14, restaurant domain of SemEval 15 and restaurant domain of SemEval 16 shared task (14Lap, 14Res, 15Res and 16Res in short). Additionally, we use another 4 languages in the restaurant domain of SemEval 16 to test our approach in multiple languages. We randomly split 10% of the training data as the development set following Li et al. (2019).\n• Syntactic Dependency Parsing: We use Penn Tree Bank (PTB) 3.0 with the same dataset preprocessing as (Ma et al., 2018).\n• Semantic Dependency Parsing: We use DM, PAS and PSD datasets for semantic dependency parsing (Oepen et al., 2014) for the SemEval 2015 shared task (Oepen et al., 2015). The three datasets have the same sentences but with different formalisms. We use the standard split for SDP. In the split, there are in-domain test sets and out-of-domain test sets for each dataset.\nAmong these tasks, NER, POS tagging, chunking and aspect extraction are sequence-structured outputs while dependency parsing and semantic dependency parsing are the graph-structured outputs. POS Tagging, chunking and DP are syntactic structured prediction tasks while NER, AE, SDP are semantic structured prediction tasks.\nWe train the controller for 30 steps and save the task model with the highest accuracy on the development set as the final model for testing. Please refer to Appendix A for more details of other settings."
    }, {
      "heading" : "4.2 Embeddings",
      "text" : "Basic Settings: For the candidates of embeddings on English datasets, we use the languagespecific model for ELMo, Flair, base BERT, GloVe word embeddings, fastText word embeddings, noncontextual character embeddings (Lample et al., 2016), multilingual Flair (M-Flair), M-BERT and\nXLM-R embeddings. The size of the search space in our experiments is 211−1=20473. For languagespecific models of other languages, please refer to Appendix A for more details. In AE, there is no available Russian-specific BERT, Flair and ELMo embeddings and there is no available Turkishspecific Flair and ELMo embeddings. We use the corresponding English embeddings instead so that the search spaces of these datasets are almost identical to those of the other datasets. All embeddings are fixed during training except that the character embeddings are trained over the task. The empirical results are reported in Section 4.3.1.\nEmbedding Fine-tuning: A usual approach to get better accuracy is fine-tuning transformer-based embeddings. In sequence labeling, most of the work follows the fine-tuning pipeline of BERT that connects the BERT model with a linear layer for word-level classification. However, when multiple embeddings are concatenated, fine-tuning a specific group of embeddings becomes difficult because of complicated hyper-parameter settings and massive GPU memory consumption. To alleviate this problem, we first fine-tune the transformer-based embeddings over the task and then concatenate these embeddings together with other embeddings in the basic setting to apply ACE. The empirical results are reported in Section 4.3.2."
    }, {
      "heading" : "4.3 Results",
      "text" : "We use the following abbreviations in our experiments: UAS: Unlabeled Attachment Score; LAS: Labeled Attachment Score; ID: In-domain test set; OOD: Out-of-domain test set. We use language codes for languages in NER and AE.\n3Flair embeddings have two models (forward and backward) for each language."
    }, {
      "heading" : "4.3.1 Comparison With Baselines",
      "text" : "To show the effectiveness of our approach, we compare our approach with two strong baselines. For the first one, we let the task model learn by itself the contribution of each embedding candidate that is helpful to the task. We set a to all-ones (i.e., the concatenation of all the embeddings) and train the task model (All). The linear layer weight W in Eq. 2 reflects the contribution of each candidate. For the second one, we use the random search (Random), a strong baseline in NAS (Li and Talwalkar, 2020). For Random, we run the same maximum iteration as in ACE. For the experiments, we report the averaged accuracy of 3 runs. Table 1 shows that ACE outperforms both baselines in 6 tasks over 23 test sets with only two exceptions. Comparing Random with All, Random outperforms All by 0.4 on average and surpasses the accuracy of All on 14 out of 23 test sets, which shows that concatenating all embeddings may not be the best solution to most structured prediction tasks. In general, searching for the concatenation for the word representation is essential in most cases, and our search design can usually lead to better results compared to both of the baselines."
    }, {
      "heading" : "4.3.2 Comparison With State-of-the-Art approaches",
      "text" : "As we have shown, ACE has an advantage in searching for better embedding concatenations. We further show that ACE is competitive or even stronger than state-of-the-art approaches. We additionally use XLNet (Yang et al., 2019) and RoBERTa as the candidates of ACE. In some tasks, we have several additional settings to better compare with previous work. In NER, we also conduct a comparison on the revised version of German datasets in the CoNLL 2006 shared task (Buchholz and Marsi, 2006). Recent work such as Yu et al. (2020) and Yamada et al. (2020) utilizes document contexts in the datasets. We follow their work and extract document embeddings for the transformer-based embeddings. Specifically, we follow the fine-tune process of Yamada et al. (2020) to fine-tune the transformer-based embeddings over the document except for BERT and M-BERT embeddings. For BERT and M-BERT, we follow the document extraction process of Yu et al. (2020) because we find that the model with such document embeddings is significantly stronger than the model trained with the fine-tuning process of Yamada et al. (2020). In SDP, the state-of-the-art\napproaches used POS tags and lemmas as additional word features to the network. We add these two features to the embedding candidates and train the embeddings together with the task. We use the fine-tuned transformer-based embeddings on each task instead of the pretrained version of these embeddings as the candidates.4\nWe additionally compare with fine-tuned XLMR model for NER, POS tagging, chunking and AE, and compare with fine-tuned XLNet model for DP and SDP, which are strong fine-tuned models in most of the experiments. Results are shown in Table 2, 3, 4. Results show that ACE with fine-tuned embeddings achieves state-of-the-art performance in all test sets, which shows that finding a good embedding concatenation helps structured prediction tasks. We also find that ACE is stronger than the fine-tuned models, which shows the effectiveness of concatenating the fine-tuned embeddings5."
    }, {
      "heading" : "5 Analysis",
      "text" : ""
    }, {
      "heading" : "5.1 Efficiency of Search Methods",
      "text" : "To show how efficient our approach is compared with the random search algorithm, we compare the algorithm in two aspects on CoNLL English NER dataset. The first aspect is the best development accuracy during training. The left part of Figure 2 shows that ACE is consistently stronger than the random search algorithm in this task. The second aspect is the searched concatenation at each time step. The right part of Figure 2 shows that the accuracy of ACE gradually increases and gets stable when more concatenations are sampled."
    }, {
      "heading" : "5.2 Ablation Study on Reward Function Design",
      "text" : "To show the effectiveness of the designed reward function, we compare our reward function (Eq. 6) with the reward function without discount factor (Eq. 5) and the traditional reward function (reward term in Eq. 4). We sample 2000 training sentences on CoNLL English NER dataset for faster training and train the controller for 50 steps. Table 5 shows that both the discount factor and the binary vector |at − ai| for the task are helpful in both development and test datasets.\n4Please refer to Appendix for more details about the embeddings.\n5We compare ACE with other fine-tuned embeddings in Appendix."
    }, {
      "heading" : "5.3 Comparison with Embedding Weighting & Ensemble Approaches",
      "text" : "We compare ACE with two more approaches to further show the effectiveness of ACE. One is a variant of All, which uses a weighting parameter b = [b1, · · · , bl, · · · , bL] passing through a sigmoid function to weight each embedding candidate. Such an approach can explicitly learn the weight of each embedding in training instead of a binary mask. We call this approach All+Weight. Another one is model ensemble, which trains the task model with each embedding candidate individually and uses the trained models to make joint prediction on the test set. We use voting for ensemble as it is simple and fast. For sequence labeling tasks, the models vote for the predicted label at each position. For DP, the models vote for the tree of each sentence. For SDP, the models vote for each potential labeled arc. We use the confidence of model predictions to break ties if there are more than one agreement with the same counts. We call this approach Ensemble. One of the benefits of voting is that it combines the predictions of the task models efficiently without any training process. We can search all possible 2L−1 model ensembles in a short period of time through caching the outputs of the models. Therefore, we search for the best ensemble of models on the development set and then evaluate the best ensemble on the test set (Ensembledev). Moreover, we additionally search for the best ensemble on the test set for reference (Ensembletest), which is the upper bound of the approach. We use the same setting as in Section 4.3.1 and select one of the datasets from each task. For NER, POS tagging, AE, and SDP, we use CoNLL 2003 English, Ritter, 16Res, and DM datasets, respectively. The results are shown in Table 6. Empirical results show that ACE out-\n.\nperforms all the settings of these approaches and even Ensembletest, which shows the effectiveness of ACE and the limitation of ensemble models. All, All+Weight and Ensembledev are competitive in most of the cases and there is no clear winner of these approaches on all the datasets. These results show the strength of embedding concatenation. Concatenating the embeddings incorporates information from all the embeddings and forms stronger word representations for the task model, while in model ensemble, it is difficult for the individual task models to affect each other."
    }, {
      "heading" : "6 Discussion: Practical Usability of ACE",
      "text" : "Concatenating multiple embeddings is a commonly used approach to improve accuracy of structured prediction. However, such approaches can be computationally costly as multiple language models are used as input. ACE is more practical than concatenating all embeddings as it can remove those\nembeddings that are not very useful in the concatenation. Moreover, ACE models can be used to guide the training of weaker models through techniques such as knowledge distillation in structured prediction (Kim and Rush, 2016; Kuncoro et al., 2016; Wang et al., 2020a, 2021b), leading to models that are both stronger and faster."
    }, {
      "heading" : "7 Conclusion",
      "text" : "In this paper, we propose Automated Concatenation of Embeddings, which automatically searches for better embedding concatenation for structured prediction tasks. We design a simple search space and use the reinforcement learning with a novel reward function to efficiently guide the controller to search for better embedding concatenations. We take the change of embedding concatenations into the reward function design and show that our new reward function is stronger than the simpler ones. Results show that ACE outperforms strong baselines. Together with fine-tuned embeddings, ACE achieves state-of-the-art performance in 6 tasks over 21 datasets."
    }, {
      "heading" : "Acknowledgments",
      "text" : "This work was supported by the National Natural Science Foundation of China (61976139) and by Alibaba Group through Alibaba Innovative Research Program. We thank Chengyue Jiang for his comments and suggestions on writing."
    }, {
      "heading" : "A Detailed Configurations",
      "text" : "Evaluation To evaluate our models, We use F1 score to evaluate NER, Chunking and AE, use accuracy to evaluate POS Tagging, use unlabeled attachment score (UAS) and labeled attachment score (LAS) to evaluate DP, and use labeled F1 score to evaluate SDP.\nTask Models and Controller For sequencestructured tasks (i.e., NER, POS tagging, chunking, aspect extraction), we use a batch size of 32 sentences and an SGD optimizer with a learning rate of 0.1. We anneal the learning rate by 0.5 when there is no accuracy improvement on the development set for 5 epochs. We set the maximum training epoch to 150. For graph-structured tasks (i.e., DP and SDP), we use Adam (Kingma and Ba, 2015) to optimize the model with a learning rate of 0.002. We anneal the learning rate by 0.75 for every 5000 iterations following Dozat and Manning (2017). We set the maximum training epoch to 300. For DP, we run the maximum spanning tree (McDonald et al., 2005) algorithm to output valid trees in testing. We fix the hyper-parameters of the task models.\nWe tune the learning rate for the controller among {0.1, 0.2, 0.3, 0.4, 0.5} and the discount factor among {0.1, 0.3, 0.5, 0.7, 0.9} on the same dataset in Section 5.2. We search for the hyperparameter through grid search and find a learning rate of 0.1 and a discount factor of 0.5 performs the best on the development set. The controller’s parameters are initialized to all 0 so that each candidate is selected evenly in the first two time steps.\nWe use Stochastic Gradient Descent (SGD) to optimize the controller. The training time depends on the task and dataset size. Take the CoNLL English NER dataset as an example. It takes 45 GPU hours to train the controller for 30 steps on a single Tesla P100 GPU, which is an acceptable training time in practice.\nSources of Embeddings The sources of the embeddings that we used are listed in Table 7."
    }, {
      "heading" : "B Additional Analysis",
      "text" : "B.1 Document-Level and Sentence-Level Representations\nRecently, models with document-level word representations extracted from transformer-based embeddings significantly outperform models with sentence-level word representations in NER (Devlin et al., 2019; Yu et al., 2020; Yamada et al., 2020). However, there are a lot of application scenarios that document contexts are unavailable. We replace the document-level word representations from transformer-based embeddings (i.e., XLMR and BERT embeddings) with the sentence-level word representations. Results are shown in Table 8. We report the test results of All to show how the gap between ACE and All changes with different kinds of representations. We report the test accuracy of the models with the highest development accuracy following Yamada et al. (2020) for a fair comparison. Empirical results show that the document-level representations can significantly improve the accuracy of ACE. Comparing with models with sentence-level representations, the averaged accuracy gap between ACE and All is enhanced from 0.7 to 1.7 with document-level representations, which shows that the advantage of ACE becomes stronger with document-level representations.\nB.2 Fine-tuned Models Versus ACE\nTo fine-tune the embeddings, we use AdamW (Loshchilov and Hutter, 2018) optimizer with a learning rate of 5 × 10−6 and trained the contextualized embeddings with the task for 10 epochs. We use a batch size of 32 for BERT, M-BERT and use a batch size of 4 for XLM-R, RoBERTa and XLNet. A comparison between ACE and the finetuned embeddings that we used in ACE is shown in Table 9, 10. Results show that ACE can further improve the accuracy of fine-tuned models.\nB.3 Retraining\nMost of the work (Zoph and Le, 2017; Zoph et al., 2018; Pham et al., 2018b; So et al., 2019; Zhu et al., 2020) in NAS retrains the searched neural architecture from scratch so that the hyper-parameters of the searched model can be modified or trained on larger datasets. To show whether our searched embedding concatenation is helpful to the task, we retrain the task model with the embedding concatenations on the same dataset from scratch. For the experiment, we use the same dataset settings as in Section 4.3.1. We train the searched embedding concatenation of each run from ACE 3 times (therefore, 9 runs for each dataset).\nTable 12 shows the comparison between retrained models with the searched embedding concatenation from ACE and All. The results show that the retrained models are competitive with ACE in SDP and in chunking. However, in another three tasks, the retrained models perform inferior to ACE. The possible reason is that the model at each step is initialized by the trained model of previous step. The retrained models outperform All in all tasks, which shows the effectiveness of the searched embedding concatenations.\nB.4 Effect of Embeddings in the Searched Embedding Concatenations\nThere is no clear conclusion on what concatenation of embeddings is helpful to most of the tasks. We analyze the best searched embedding concatenations by ACE over different structured outputs, semantic/syntactic type, and monolingual/multilingual tasks. The percentage of each embedding selected by the best concatenations from all experiments of ACE are shown in Table 13. The best embedding concatenation varies over the output structure, syntactic/semantic level of understanding, and the language. The experimental results show that it is essential to select embeddings for each kind of task separately. However, we also find that the embeddings are strong in specific settings. In comparison to the sequence-structured and graph-structured tasks, we find that M-BERT and ELMo are only frequently selected in sequencestructured tasks while XLM-R embeddings are always selected in graph-structured tasks. For Flair embeddings, the forward and backward model are evenly selected. We suspect one direction of Flair embeddings is strong enough. Therefore concatenating the embeddings from two directions together cannot further improve the accuracy. For non-contextualized embeddings, pretrained word embeddings are frequently selected in sequencestructured tasks, and character embeddings are not. When we dig deeper into the semantic and syntactic type of these two structured outputs, we find that in all best concatenations, BERT embeddings are selected in all syntactic sequence-structured tasks, and Flair, M-Flair, word, and XLM-R embeddings are selected in syntactic graph-structured tasks. In multilingual tasks, all best concatenations in multilingual NER tasks select M-BERT embeddings while M-BERT is rarely selected in multilingual AE tasks. The monolingual Flair embeddings are always selected in NER tasks, and XLM-R is more\nfrequently selected in multilingual tasks than monolingual sequence-structured tasks (SS)."
    } ],
    "references" : [ {
      "title" : "Pooled contextualized embeddings for named entity recognition",
      "author" : [ "Alan Akbik", "Tanja Bergmann", "Roland Vollgraf." ],
      "venue" : "Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Lan-",
      "citeRegEx" : "Akbik et al\\.,? 2019",
      "shortCiteRegEx" : "Akbik et al\\.",
      "year" : 2019
    }, {
      "title" : "Contextual string embeddings for sequence labeling",
      "author" : [ "Alan Akbik", "Duncan Blythe", "Roland Vollgraf." ],
      "venue" : "Proceedings of the 27th International Conference on Computational Linguistics, pages 1638–1649, Santa Fe, New Mexico, USA. Associ-",
      "citeRegEx" : "Akbik et al\\.,? 2018",
      "shortCiteRegEx" : "Akbik et al\\.",
      "year" : 2018
    }, {
      "title" : "An evolutionary algorithm that constructs recurrent neural networks",
      "author" : [ "Peter J Angeline", "Gregory M Saunders", "Jordan B Pollack." ],
      "venue" : "IEEE transactions on Neural Networks, 5(1):54–65.",
      "citeRegEx" : "Angeline et al\\.,? 1994",
      "shortCiteRegEx" : "Angeline et al\\.",
      "year" : 1994
    }, {
      "title" : "Cloze-driven pretraining of self-attention networks",
      "author" : [ "Alexei Baevski", "Sergey Edunov", "Yinhan Liu", "Luke Zettlemoyer", "Michael Auli." ],
      "venue" : "Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th Inter-",
      "citeRegEx" : "Baevski et al\\.,? 2019",
      "shortCiteRegEx" : "Baevski et al\\.",
      "year" : 2019
    }, {
      "title" : "Designing neural network architectures using reinforcement learning",
      "author" : [ "Bowen Baker", "Otkrist Gupta", "Nikhil Naik", "Ramesh Raskar." ],
      "venue" : "International Conference on Learning Representations.",
      "citeRegEx" : "Baker et al\\.,? 2017",
      "shortCiteRegEx" : "Baker et al\\.",
      "year" : 2017
    }, {
      "title" : "Enriching word vectors with subword information",
      "author" : [ "Piotr Bojanowski", "Edouard Grave", "Armand Joulin", "Tomas Mikolov." ],
      "venue" : "Transactions of the Association for Computational Linguistics, 5:135–146.",
      "citeRegEx" : "Bojanowski et al\\.,? 2017",
      "shortCiteRegEx" : "Bojanowski et al\\.",
      "year" : 2017
    }, {
      "title" : "CoNLLX shared task on multilingual dependency parsing",
      "author" : [ "Sabine Buchholz", "Erwin Marsi." ],
      "venue" : "Proceedings of the Tenth Conference on Computational Natural Language Learning (CoNLL-X), pages 149–164, New York City. Association for",
      "citeRegEx" : "Buchholz and Marsi.,? 2006",
      "shortCiteRegEx" : "Buchholz and Marsi.",
      "year" : 2006
    }, {
      "title" : "SeqVAT: Virtual adversarial training for semi-supervised sequence labeling",
      "author" : [ "Luoxin Chen", "Weitong Ruan", "Xinyue Liu", "Jianhua Lu." ],
      "venue" : "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages 8801–8811, On-",
      "citeRegEx" : "Chen et al\\.,? 2020",
      "shortCiteRegEx" : "Chen et al\\.",
      "year" : 2020
    }, {
      "title" : "Semi-supervised sequence modeling with cross-view training",
      "author" : [ "Kevin Clark", "Minh-Thang Luong", "Christopher D. Manning", "Quoc Le." ],
      "venue" : "Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 1914–",
      "citeRegEx" : "Clark et al\\.,? 2018",
      "shortCiteRegEx" : "Clark et al\\.",
      "year" : 2018
    }, {
      "title" : "Unsupervised cross-lingual representation learning at scale",
      "author" : [ "Alexis Conneau", "Kartikay Khandelwal", "Naman Goyal", "Vishrav Chaudhary", "Guillaume Wenzek", "Francisco Guzmán", "Edouard Grave", "Myle Ott", "Luke Zettlemoyer", "Veselin Stoyanov." ],
      "venue" : "In",
      "citeRegEx" : "Conneau et al\\.,? 2020",
      "shortCiteRegEx" : "Conneau et al\\.",
      "year" : 2020
    }, {
      "title" : "Grammatical category disambiguation by statistical optimization",
      "author" : [ "Steven J. DeRose." ],
      "venue" : "Computational Linguistics, 14(1):31–39.",
      "citeRegEx" : "DeRose.,? 1988",
      "shortCiteRegEx" : "DeRose.",
      "year" : 1988
    }, {
      "title" : "BERT: Pre-training of deep bidirectional transformers for language understanding",
      "author" : [ "Jacob Devlin", "Ming-Wei Chang", "Kenton Lee", "Kristina Toutanova." ],
      "venue" : "Proceedings of the 2019 Conference of the North American Chapter of the Association",
      "citeRegEx" : "Devlin et al\\.,? 2019",
      "shortCiteRegEx" : "Devlin et al\\.",
      "year" : 2019
    }, {
      "title" : "Deep biaffine attention for neural dependency parsing",
      "author" : [ "Timothy Dozat", "Christopher D Manning." ],
      "venue" : "International Conference on Learning Representations.",
      "citeRegEx" : "Dozat and Manning.,? 2017",
      "shortCiteRegEx" : "Dozat and Manning.",
      "year" : 2017
    }, {
      "title" : "Simpler but more accurate semantic dependency parsing",
      "author" : [ "Timothy Dozat", "Christopher D. Manning." ],
      "venue" : "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers), pages 484–490, Mel-",
      "citeRegEx" : "Dozat and Manning.,? 2018",
      "shortCiteRegEx" : "Dozat and Manning.",
      "year" : 2018
    }, {
      "title" : "Simple and efficient architecture search for convolutional neural networks",
      "author" : [ "Thomas Elsken", "Jan-Hendrik Metzen", "Frank Hutter." ],
      "venue" : "International Conference on Learning Representations workshop.",
      "citeRegEx" : "Elsken et al\\.,? 2018",
      "shortCiteRegEx" : "Elsken et al\\.",
      "year" : 2018
    }, {
      "title" : "Neural architecture search: A survey",
      "author" : [ "Thomas Elsken", "Jan Hendrik Metzen", "Frank Hutter." ],
      "venue" : "Journal of Machine Learning Research, 20:1–21.",
      "citeRegEx" : "Elsken et al\\.,? 2019",
      "shortCiteRegEx" : "Elsken et al\\.",
      "year" : 2019
    }, {
      "title" : "Transition-based semantic dependency parsing with pointer networks",
      "author" : [ "Daniel Fernández-González", "Carlos GómezRodríguez." ],
      "venue" : "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages",
      "citeRegEx" : "Fernández.González and GómezRodríguez.,? 2020",
      "shortCiteRegEx" : "Fernández.González and GómezRodríguez.",
      "year" : 2020
    }, {
      "title" : "Neuroevolution: from architectures to learning",
      "author" : [ "Dario Floreano", "Peter Dürr", "Claudio Mattiussi." ],
      "venue" : "Evolutionary intelligence, 1(1):47–62.",
      "citeRegEx" : "Floreano et al\\.,? 2008",
      "shortCiteRegEx" : "Floreano et al\\.",
      "year" : 2008
    }, {
      "title" : "Nas-fpn: Learning scalable feature pyramid architecture for object detection",
      "author" : [ "Golnaz Ghiasi", "Tsung-Yi Lin", "Quoc V Le." ],
      "venue" : "Proceedings of the IEEE conference on computer vision and pattern recognition, pages 7036–7045.",
      "citeRegEx" : "Ghiasi et al\\.,? 2019",
      "shortCiteRegEx" : "Ghiasi et al\\.",
      "year" : 2019
    }, {
      "title" : "Part-of-speech tagging for Twitter: Annotation, features, and experiments",
      "author" : [ "Kevin Gimpel", "Nathan Schneider", "Brendan O’Connor", "Dipanjan Das", "Daniel Mills", "Jacob Eisenstein", "Michael Heilman", "Dani Yogatama", "Jeffrey Flanigan", "Noah A. Smith" ],
      "venue" : null,
      "citeRegEx" : "Gimpel et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Gimpel et al\\.",
      "year" : 2011
    }, {
      "title" : "A comparative analysis of selection schemes used in genetic algorithms",
      "author" : [ "David E Goldberg", "Kalyanmoy Deb." ],
      "venue" : "Foundations of genetic algorithms, volume 1, pages 69–93. Elsevier.",
      "citeRegEx" : "Goldberg and Deb.,? 1991",
      "shortCiteRegEx" : "Goldberg and Deb.",
      "year" : 1991
    }, {
      "title" : "Transferring from formal newswire domain with hypernet for Twitter POS tagging",
      "author" : [ "Tao Gui", "Qi Zhang", "Jingjing Gong", "Minlong Peng", "Di Liang", "Keyu Ding", "Xuanjing Huang." ],
      "venue" : "Proceedings of the 2018 Conference on Empirical Methods in Nat-",
      "citeRegEx" : "Gui et al\\.,? 2018",
      "shortCiteRegEx" : "Gui et al\\.",
      "year" : 2018
    }, {
      "title" : "Part-of-speech tagging for Twitter with adversarial neural networks",
      "author" : [ "Tao Gui", "Qi Zhang", "Haoran Huang", "Minlong Peng", "Xuanjing Huang." ],
      "venue" : "Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 2411–",
      "citeRegEx" : "Gui et al\\.,? 2017",
      "shortCiteRegEx" : "Gui et al\\.",
      "year" : 2017
    }, {
      "title" : "Establishing strong baselines for the new decade: Sequence tagging, syntactic and semantic parsing with bert",
      "author" : [ "Han He", "Jinho Choi." ],
      "venue" : "The Thirty-Third International Flairs Conference.",
      "citeRegEx" : "He and Choi.,? 2020",
      "shortCiteRegEx" : "He and Choi.",
      "year" : 2020
    }, {
      "title" : "Deep residual learning for image recognition",
      "author" : [ "Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun." ],
      "venue" : "Proceedings of the IEEE conference on computer vision and pattern recognition, pages 770– 778.",
      "citeRegEx" : "He et al\\.,? 2016",
      "shortCiteRegEx" : "He et al\\.",
      "year" : 2016
    }, {
      "title" : "Mining and summarizing customer reviews",
      "author" : [ "Minqing Hu", "Bing Liu." ],
      "venue" : "Proceedings of the Tenth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, KDD ’04, page 168–177, New York, NY, USA. Association for",
      "citeRegEx" : "Hu and Liu.,? 2004",
      "shortCiteRegEx" : "Hu and Liu.",
      "year" : 2004
    }, {
      "title" : "Densely connected convolutional networks",
      "author" : [ "Gao Huang", "Zhuang Liu", "Laurens Van Der Maaten", "Kilian Q Weinberger." ],
      "venue" : "Proceedings of the IEEE conference on computer vision and pattern recognition, pages 4700–4708.",
      "citeRegEx" : "Huang et al\\.,? 2017",
      "shortCiteRegEx" : "Huang et al\\.",
      "year" : 2017
    }, {
      "title" : "Semi-supervised semantic dependency parsing using CRF autoencoders",
      "author" : [ "Zixia Jia", "Youmi Ma", "Jiong Cai", "Kewei Tu." ],
      "venue" : "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages 6795–6805, Online. Asso-",
      "citeRegEx" : "Jia et al\\.,? 2020",
      "shortCiteRegEx" : "Jia et al\\.",
      "year" : 2020
    }, {
      "title" : "An empirical exploration of recurrent network architectures",
      "author" : [ "Rafal Jozefowicz", "Wojciech Zaremba", "Ilya Sutskever." ],
      "venue" : "International conference on machine learning, pages 2342–2350.",
      "citeRegEx" : "Jozefowicz et al\\.,? 2015",
      "shortCiteRegEx" : "Jozefowicz et al\\.",
      "year" : 2015
    }, {
      "title" : "Sequencelevel knowledge distillation",
      "author" : [ "Yoon Kim", "Alexander M. Rush." ],
      "venue" : "Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 1317–1327, Austin, Texas. Association for Computational Linguistics.",
      "citeRegEx" : "Kim and Rush.,? 2016",
      "shortCiteRegEx" : "Kim and Rush.",
      "year" : 2016
    }, {
      "title" : "Adam: A method for stochastic optimization",
      "author" : [ "Diederik P Kingma", "Jimmy Ba." ],
      "venue" : "International Conference on Learning Representations.",
      "citeRegEx" : "Kingma and Ba.,? 2015",
      "shortCiteRegEx" : "Kingma and Ba.",
      "year" : 2015
    }, {
      "title" : "75 languages, 1 model: Parsing Universal Dependencies universally",
      "author" : [ "Dan Kondratyuk", "Milan Straka." ],
      "venue" : "Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Confer-",
      "citeRegEx" : "Kondratyuk and Straka.,? 2019",
      "shortCiteRegEx" : "Kondratyuk and Straka.",
      "year" : 2019
    }, {
      "title" : "Distilling an ensemble of greedy dependency parsers into one MST parser",
      "author" : [ "Adhiguna Kuncoro", "Miguel Ballesteros", "Lingpeng Kong", "Chris Dyer", "Noah A. Smith." ],
      "venue" : "Proceedings of the 2016 Conference on Empirical Methods in Natural Language",
      "citeRegEx" : "Kuncoro et al\\.,? 2016",
      "shortCiteRegEx" : "Kuncoro et al\\.",
      "year" : 2016
    }, {
      "title" : "Neural architectures for named entity recognition",
      "author" : [ "Guillaume Lample", "Miguel Ballesteros", "Sandeep Subramanian", "Kazuya Kawakami", "Chris Dyer." ],
      "venue" : "Proceedings of the 2016 Conference of the North American Chapter of the Association for Computa-",
      "citeRegEx" : "Lample et al\\.,? 2016",
      "shortCiteRegEx" : "Lample et al\\.",
      "year" : 2016
    }, {
      "title" : "Random search and reproducibility for neural architecture search",
      "author" : [ "Liam Li", "Ameet Talwalkar." ],
      "venue" : "Uncertainty in Artificial Intelligence, pages 367– 377. PMLR.",
      "citeRegEx" : "Li and Talwalkar.,? 2020",
      "shortCiteRegEx" : "Li and Talwalkar.",
      "year" : 2020
    }, {
      "title" : "Exploiting BERT for end-to-end aspect-based sentiment analysis",
      "author" : [ "Xin Li", "Lidong Bing", "Wenxuan Zhang", "Wai Lam." ],
      "venue" : "Proceedings of the 5th Workshop on Noisy User-generated Text (W-NUT 2019), pages 34–41, Hong Kong, China. Association for",
      "citeRegEx" : "Li et al\\.,? 2019",
      "shortCiteRegEx" : "Li et al\\.",
      "year" : 2019
    }, {
      "title" : "Global greedy dependency parsing",
      "author" : [ "Zuchao Li", "Hai Zhao", "Kevin Parnow." ],
      "venue" : "Proceedings of the AAAI Conference on Artificial Intelligence, volume 34, pages 8319–8326.",
      "citeRegEx" : "Li et al\\.,? 2020",
      "shortCiteRegEx" : "Li et al\\.",
      "year" : 2020
    }, {
      "title" : "Auto-deeplab: Hierarchical neural architecture search for semantic image segmentation",
      "author" : [ "Chenxi Liu", "Liang-Chieh Chen", "Florian Schroff", "Hartwig Adam", "Wei Hua", "Alan L Yuille", "Li FeiFei." ],
      "venue" : "Proceedings of the IEEE conference on computer",
      "citeRegEx" : "Liu et al\\.,? 2019a",
      "shortCiteRegEx" : "Liu et al\\.",
      "year" : 2019
    }, {
      "title" : "Hierarchical representations for efficient architecture search",
      "author" : [ "Hanxiao Liu", "Karen Simonyan", "Oriol Vinyals", "Chrisantha Fernando", "Koray Kavukcuoglu." ],
      "venue" : "International Conference on Learning Representations.",
      "citeRegEx" : "Liu et al\\.,? 2018a",
      "shortCiteRegEx" : "Liu et al\\.",
      "year" : 2018
    }, {
      "title" : "Parsing tweets into Universal Dependencies",
      "author" : [ "Yijia Liu", "Yi Zhu", "Wanxiang Che", "Bing Qin", "Nathan Schneider", "Noah A. Smith." ],
      "venue" : "Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics:",
      "citeRegEx" : "Liu et al\\.,? 2018b",
      "shortCiteRegEx" : "Liu et al\\.",
      "year" : 2018
    }, {
      "title" : "GCDT: A global context enhanced deep transition architecture for sequence labeling",
      "author" : [ "Yijin Liu", "Fandong Meng", "Jinchao Zhang", "Jinan Xu", "Yufeng Chen", "Jie Zhou." ],
      "venue" : "Proceedings of the 57th Annual Meeting of the Association for Computational Lin-",
      "citeRegEx" : "Liu et al\\.,? 2019b",
      "shortCiteRegEx" : "Liu et al\\.",
      "year" : 2019
    }, {
      "title" : "Roberta: A robustly optimized bert pretraining approach",
      "author" : [ "Yinhan Liu", "Myle Ott", "Naman Goyal", "Jingfei Du", "Mandar Joshi", "Danqi Chen", "Omer Levy", "Mike Lewis", "Luke Zettlemoyer", "Veselin Stoyanov." ],
      "venue" : "arXiv preprint arXiv:1907.11692.",
      "citeRegEx" : "Liu et al\\.,? 2019c",
      "shortCiteRegEx" : "Liu et al\\.",
      "year" : 2019
    }, {
      "title" : "Decoupled weight decay regularization",
      "author" : [ "Ilya Loshchilov", "Frank Hutter." ],
      "venue" : "International Conference on Learning Representations.",
      "citeRegEx" : "Loshchilov and Hutter.,? 2018",
      "shortCiteRegEx" : "Loshchilov and Hutter.",
      "year" : 2018
    }, {
      "title" : "Exploring cross-sentence contexts for named entity recognition with BERT",
      "author" : [ "Jouni Luoma", "Sampo Pyysalo." ],
      "venue" : "Proceedings of the 28th International Conference on Computational Linguistics, pages 904–914, Barcelona, Spain (Online). Interna-",
      "citeRegEx" : "Luoma and Pyysalo.,? 2020",
      "shortCiteRegEx" : "Luoma and Pyysalo.",
      "year" : 2020
    }, {
      "title" : "End-to-end sequence labeling via bi-directional LSTM-CNNsCRF",
      "author" : [ "Xuezhe Ma", "Eduard Hovy." ],
      "venue" : "Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1064–1074, Berlin, Ger-",
      "citeRegEx" : "Ma and Hovy.,? 2016",
      "shortCiteRegEx" : "Ma and Hovy.",
      "year" : 2016
    }, {
      "title" : "Stackpointer networks for dependency parsing",
      "author" : [ "Xuezhe Ma", "Zecong Hu", "Jingzhou Liu", "Nanyun Peng", "Graham Neubig", "Eduard Hovy." ],
      "venue" : "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long",
      "citeRegEx" : "Ma et al\\.,? 2018",
      "shortCiteRegEx" : "Ma et al\\.",
      "year" : 2018
    }, {
      "title" : "Non-projective dependency parsing using spanning tree algorithms",
      "author" : [ "Ryan McDonald", "Fernando Pereira", "Kiril Ribarov", "Jan Hajič." ],
      "venue" : "Proceedings of Human Language Technology Conference and Conference on Empirical Methods in Natural",
      "citeRegEx" : "McDonald et al\\.,? 2005",
      "shortCiteRegEx" : "McDonald et al\\.",
      "year" : 2005
    }, {
      "title" : "Distributed representations of words and phrases and their compositionality",
      "author" : [ "Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean." ],
      "venue" : "Advances in neural information processing systems, pages 3111–3119.",
      "citeRegEx" : "Mikolov et al\\.,? 2013",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2013
    }, {
      "title" : "Designing neural networks using genetic algorithms",
      "author" : [ "Geoffrey Miller", "Peter Todd", "Shailesh Hegde." ],
      "venue" : "3rd International Conference on Genetic Algorithms, pages 379–384.",
      "citeRegEx" : "Miller et al\\.,? 1989",
      "shortCiteRegEx" : "Miller et al\\.",
      "year" : 1989
    }, {
      "title" : "Rethinking self-attention: Towards interpretability in neural parsing",
      "author" : [ "Khalil Mrini", "Franck Dernoncourt", "Quan Hung Tran", "Trung Bui", "Walter Chang", "Ndapa Nakashole." ],
      "venue" : "Findings of the Association for Computational Linguistics: EMNLP",
      "citeRegEx" : "Mrini et al\\.,? 2020",
      "shortCiteRegEx" : "Mrini et al\\.",
      "year" : 2020
    }, {
      "title" : "BERTweet: A pre-trained language model for English Tweets",
      "author" : [ "Dat Quoc Nguyen", "Thanh Vu", "Anh Tuan Nguyen." ],
      "venue" : "Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing: System Demonstrations.",
      "citeRegEx" : "Nguyen et al\\.,? 2020",
      "shortCiteRegEx" : "Nguyen et al\\.",
      "year" : 2020
    }, {
      "title" : "Semeval 2015 task 18: Broad-coverage semantic dependency parsing",
      "author" : [ "Stephan Oepen", "Marco Kuhlmann", "Yusuke Miyao", "Daniel Zeman", "Silvie Cinková", "Dan Flickinger", "Jan Hajic", "Zdenka Uresova." ],
      "venue" : "Proceedings of the 9th International Work-",
      "citeRegEx" : "Oepen et al\\.,? 2015",
      "shortCiteRegEx" : "Oepen et al\\.",
      "year" : 2015
    }, {
      "title" : "Semeval 2014 task 8: Broad-coverage semantic dependency parsing",
      "author" : [ "Stephan Oepen", "Marco Kuhlmann", "Yusuke Miyao", "Daniel Zeman", "Dan Flickinger", "Jan Hajic", "Angelina Ivanova", "Yi Zhang." ],
      "venue" : "SemEval 2014.",
      "citeRegEx" : "Oepen et al\\.,? 2014",
      "shortCiteRegEx" : "Oepen et al\\.",
      "year" : 2014
    }, {
      "title" : "Improved part-of-speech tagging for online conversational text with word clusters",
      "author" : [ "Olutobi Owoputi", "Brendan O’Connor", "Chris Dyer", "Kevin Gimpel", "Nathan Schneider", "Noah A. Smith" ],
      "venue" : "In Proceedings of the 2013 Conference of the North",
      "citeRegEx" : "Owoputi et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Owoputi et al\\.",
      "year" : 2013
    }, {
      "title" : "Glove: Global vectors for word representation",
      "author" : [ "Jeffrey Pennington", "Richard Socher", "Christopher Manning." ],
      "venue" : "Proceedings of the 2014 conference on empirical methods in natural language processing (EMNLP), pages 1532–1543.",
      "citeRegEx" : "Pennington et al\\.,? 2014",
      "shortCiteRegEx" : "Pennington et al\\.",
      "year" : 2014
    }, {
      "title" : "Deep contextualized word representations",
      "author" : [ "Matthew Peters", "Mark Neumann", "Mohit Iyyer", "Matt Gardner", "Christopher Clark", "Kenton Lee", "Luke Zettlemoyer." ],
      "venue" : "Proceedings of the 2018 Conference of the North American Chapter of the Associ-",
      "citeRegEx" : "Peters et al\\.,? 2018",
      "shortCiteRegEx" : "Peters et al\\.",
      "year" : 2018
    }, {
      "title" : "Efficient neural architecture search via parameters sharing",
      "author" : [ "Hieu Pham", "Melody Guan", "Barret Zoph", "Quoc Le", "Jeff Dean." ],
      "venue" : "International Conference on Machine Learning, pages 4095–4104.",
      "citeRegEx" : "Pham et al\\.,? 2018a",
      "shortCiteRegEx" : "Pham et al\\.",
      "year" : 2018
    }, {
      "title" : "Efficient neural architecture search via parameter sharing",
      "author" : [ "Hieu Pham", "Melody Y Guan", "Barret Zoph", "Quoc V Le", "Jeff Dean." ],
      "venue" : "International Conference on Machine Learning.",
      "citeRegEx" : "Pham et al\\.,? 2018b",
      "shortCiteRegEx" : "Pham et al\\.",
      "year" : 2018
    }, {
      "title" : "How multilingual is multilingual BERT? In Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 4996– 5001, Florence, Italy",
      "author" : [ "Telmo Pires", "Eva Schlinger", "Dan Garrette." ],
      "venue" : "Association for Computa-",
      "citeRegEx" : "Pires et al\\.,? 2019",
      "shortCiteRegEx" : "Pires et al\\.",
      "year" : 2019
    }, {
      "title" : "Jiménez-Zafra, and Gülşen Eryiğit",
      "author" : [ "talia Loukachevitch", "Evgeniy Kotelnikov", "Nuria Bel", "Salud María" ],
      "venue" : "In Proceedings of the 10th International Workshop on Semantic Evaluation (SemEval-",
      "citeRegEx" : "Loukachevitch et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Loukachevitch et al\\.",
      "year" : 2016
    }, {
      "title" : "SemEval-2015 task 12: Aspect based sentiment analysis",
      "author" : [ "Maria Pontiki", "Dimitris Galanis", "Haris Papageorgiou", "Suresh Manandhar", "Ion Androutsopoulos." ],
      "venue" : "Proceedings of the 9th International Workshop on Semantic Evaluation (SemEval 2015),",
      "citeRegEx" : "Pontiki et al\\.,? 2015",
      "shortCiteRegEx" : "Pontiki et al\\.",
      "year" : 2015
    }, {
      "title" : "SemEval-2014 task 4: Aspect based sentiment analysis",
      "author" : [ "Maria Pontiki", "Dimitris Galanis", "John Pavlopoulos", "Harris Papageorgiou", "Ion Androutsopoulos", "Suresh Manandhar." ],
      "venue" : "Proceedings of the 8th International Workshop on Semantic Evaluation",
      "citeRegEx" : "Pontiki et al\\.,? 2014",
      "shortCiteRegEx" : "Pontiki et al\\.",
      "year" : 2014
    }, {
      "title" : "Regularized evolution for image classifier architecture search",
      "author" : [ "Esteban Real", "Alok Aggarwal", "Yanping Huang", "Quoc V Le." ],
      "venue" : "Proceedings of the aaai conference on artificial intelligence, volume 33, pages 4780–4789.",
      "citeRegEx" : "Real et al\\.,? 2019",
      "shortCiteRegEx" : "Real et al\\.",
      "year" : 2019
    }, {
      "title" : "Large-scale evolution of image classifiers",
      "author" : [ "Esteban Real", "Sherry Moore", "Andrew Selle", "Saurabh Saxena", "Yutaka Leon Suematsu", "Jie Tan", "Quoc V Le", "Alexey Kurakin." ],
      "venue" : "International Conference on Machine Learning, pages 2902–2911.",
      "citeRegEx" : "Real et al\\.,? 2017",
      "shortCiteRegEx" : "Real et al\\.",
      "year" : 2017
    }, {
      "title" : "Named entity recognition in tweets: An experimental study",
      "author" : [ "Alan Ritter", "Sam Clark", "Mausam", "Oren Etzioni." ],
      "venue" : "Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing, pages 1524–1534, Edinburgh, Scotland,",
      "citeRegEx" : "Ritter et al\\.,? 2011",
      "shortCiteRegEx" : "Ritter et al\\.",
      "year" : 2011
    }, {
      "title" : "Learning character-level representations for part-of-speech tagging",
      "author" : [ "Cicero D Santos", "Bianca Zadrozny." ],
      "venue" : "Proceedings of the 31st international conference on machine learning (ICML-14), pages 1818–1826.",
      "citeRegEx" : "Santos and Zadrozny.,? 2014",
      "shortCiteRegEx" : "Santos and Zadrozny.",
      "year" : 2014
    }, {
      "title" : "Cross-lingual alignment of contextual word embeddings, with applications to zeroshot dependency parsing",
      "author" : [ "Tal Schuster", "Ori Ram", "Regina Barzilay", "Amir Globerson." ],
      "venue" : "Proceedings of the 2019 Conference of the North American Chapter of",
      "citeRegEx" : "Schuster et al\\.,? 2019",
      "shortCiteRegEx" : "Schuster et al\\.",
      "year" : 2019
    }, {
      "title" : "The evolved transformer",
      "author" : [ "David R So", "Chen Liang", "Quoc V Le." ],
      "venue" : "International Conference on Machine Learning.",
      "citeRegEx" : "So et al\\.,? 2019",
      "shortCiteRegEx" : "So et al\\.",
      "year" : 2019
    }, {
      "title" : "Evolving neural networks through augmenting topologies",
      "author" : [ "Kenneth O Stanley", "Risto Miikkulainen." ],
      "venue" : "Evolutionary computation, 10(2):99– 127.",
      "citeRegEx" : "Stanley and Miikkulainen.,? 2002",
      "shortCiteRegEx" : "Stanley and Miikkulainen.",
      "year" : 2002
    }, {
      "title" : "Neural architectures for nested NER through linearization",
      "author" : [ "Jana Straková", "Milan Straka", "Jan Hajic." ],
      "venue" : "Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 5326–5331, Florence, Italy. Association for",
      "citeRegEx" : "Straková et al\\.,? 2019",
      "shortCiteRegEx" : "Straková et al\\.",
      "year" : 2019
    }, {
      "title" : "A genetic programming approach to designing convolutional neural network architectures",
      "author" : [ "Masanori Suganuma", "Shinichi Shirakawa", "Tomoharu Nagao." ],
      "venue" : "Proceedings of the genetic and evolutionary computation conference, pages 497–504.",
      "citeRegEx" : "Suganuma et al\\.,? 2017",
      "shortCiteRegEx" : "Suganuma et al\\.",
      "year" : 2017
    }, {
      "title" : "Named entity task definition, version 2.1",
      "author" : [ "Beth M. Sundheim" ],
      "venue" : "In Proceedings of the Sixth Message Understanding Conference,",
      "citeRegEx" : "Sundheim.,? \\Q1995\\E",
      "shortCiteRegEx" : "Sundheim.",
      "year" : 1995
    }, {
      "title" : "Reinforcement learning: An introduction",
      "author" : [ "Richard S Sutton", "Andrew G Barto." ],
      "venue" : "MIT press.",
      "citeRegEx" : "Sutton and Barto.,? 1992",
      "shortCiteRegEx" : "Sutton and Barto.",
      "year" : 1992
    }, {
      "title" : "Rethinking the inception architecture for computer vision",
      "author" : [ "Christian Szegedy", "Vincent Vanhoucke", "Sergey Ioffe", "Jon Shlens", "Zbigniew Wojna." ],
      "venue" : "Proceedings of the IEEE conference on computer vision and pattern recognition, pages 2818–2826.",
      "citeRegEx" : "Szegedy et al\\.,? 2016",
      "shortCiteRegEx" : "Szegedy et al\\.",
      "year" : 2016
    }, {
      "title" : "éléments de syntaxe structurale",
      "author" : [ "Lucien Tesnière." ],
      "venue" : "Editions Klincksieck.",
      "citeRegEx" : "Tesnière.,? 1959",
      "shortCiteRegEx" : "Tesnière.",
      "year" : 1959
    }, {
      "title" : "Introduction to the CoNLL-2002 shared task: Language-independent named entity recognition",
      "author" : [ "Erik F. Tjong Kim Sang." ],
      "venue" : "COLING-02: The 6th Conference on Natural Language Learning 2002 (CoNLL-2002).",
      "citeRegEx" : "Sang.,? 2002",
      "shortCiteRegEx" : "Sang.",
      "year" : 2002
    }, {
      "title" : "Introduction to the CoNLL-2000 shared task chunking",
      "author" : [ "Erik F. Tjong Kim Sang", "Sabine Buchholz." ],
      "venue" : "Fourth Conference on Computational Natural Language Learning and the Second Learning Language in Logic Workshop.",
      "citeRegEx" : "Sang and Buchholz.,? 2000",
      "shortCiteRegEx" : "Sang and Buchholz.",
      "year" : 2000
    }, {
      "title" : "Introduction to the CoNLL-2003 shared task: Language-independent named entity recognition",
      "author" : [ "Erik F. Tjong Kim Sang", "Fien De Meulder." ],
      "venue" : "Proceedings of the Seventh Conference on Natural Language Learning at HLT-NAACL 2003, pages",
      "citeRegEx" : "Sang and Meulder.,? 2003",
      "shortCiteRegEx" : "Sang and Meulder.",
      "year" : 2003
    }, {
      "title" : "Attention is all you need",
      "author" : [ "Ashish Vaswani", "Noam Shazeer", "Niki Parmar", "Jakob Uszkoreit", "Llion Jones", "Aidan N Gomez", "Łukasz Kaiser", "Illia Polosukhin." ],
      "venue" : "Advances in neural information processing systems, pages 5998–6008.",
      "citeRegEx" : "Vaswani et al\\.,? 2017",
      "shortCiteRegEx" : "Vaswani et al\\.",
      "year" : 2017
    }, {
      "title" : "Second-order semantic dependency parsing with end-to-end neural networks",
      "author" : [ "Xinyu Wang", "Jingxian Huang", "Kewei Tu." ],
      "venue" : "Proceedings of the",
      "citeRegEx" : "Wang et al\\.,? 2019",
      "shortCiteRegEx" : "Wang et al\\.",
      "year" : 2019
    }, {
      "title" : "Structure-level knowledge distillation for multilingual sequence labeling",
      "author" : [ "Xinyu Wang", "Yong Jiang", "Nguyen Bach", "Tao Wang", "Fei Huang", "Kewei Tu." ],
      "venue" : "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics,",
      "citeRegEx" : "Wang et al\\.,? 2020a",
      "shortCiteRegEx" : "Wang et al\\.",
      "year" : 2020
    }, {
      "title" : "Improving Named Entity Recognition by External Context Retrieving and Cooperative Learning",
      "author" : [ "Xinyu Wang", "Yong Jiang", "Nguyen Bach", "Tao Wang", "Zhongqiang Huang", "Fei Huang", "Kewei Tu." ],
      "venue" : "the Joint Conference of the 59th Annual Meet-",
      "citeRegEx" : "Wang et al\\.,? 2021a",
      "shortCiteRegEx" : "Wang et al\\.",
      "year" : 2021
    }, {
      "title" : "2020b. More embeddings, better sequence labelers",
      "author" : [ "Xinyu Wang", "Yong Jiang", "Nguyen Bach", "Tao Wang", "Huang Zhongqiang", "Fei Huang", "Kewei Tu" ],
      "venue" : "In Findings of EMNLP, Online",
      "citeRegEx" : "Wang et al\\.,? \\Q2020\\E",
      "shortCiteRegEx" : "Wang et al\\.",
      "year" : 2020
    }, {
      "title" : "Structural Knowledge Distillation: Tractably Distilling Information for Structured Predictor",
      "author" : [ "Xinyu Wang", "Yong Jiang", "Zhaohui Yan", "Zixia Jia", "Nguyen Bach", "Tao Wang", "Zhongqiang Huang", "Fei Huang", "Kewei Tu." ],
      "venue" : "the Joint Conference",
      "citeRegEx" : "Wang et al\\.,? 2021b",
      "shortCiteRegEx" : "Wang et al\\.",
      "year" : 2021
    }, {
      "title" : "Second-order neural dependency parsing with message passing and endto-end training",
      "author" : [ "Xinyu Wang", "Kewei Tu." ],
      "venue" : "Proceedings of the 1st Conference of the Asia-Pacific Chapter of the Association for Computational Linguistics and the 10th Interna-",
      "citeRegEx" : "Wang and Tu.,? 2020",
      "shortCiteRegEx" : "Wang and Tu.",
      "year" : 2020
    }, {
      "title" : "Don’t eclipse your arts due to small discrepancies: Boundary repositioning with a pointer network for aspect extraction",
      "author" : [ "Zhenkai Wei", "Yu Hong", "Bowei Zou", "Meng Cheng", "Jianmin Yao." ],
      "venue" : "Proceedings of the 58th Annual Meeting of the Asso-",
      "citeRegEx" : "Wei et al\\.,? 2020",
      "shortCiteRegEx" : "Wei et al\\.",
      "year" : 2020
    }, {
      "title" : "Simple statistical gradientfollowing algorithms for connectionist reinforcement learning",
      "author" : [ "Ronald J Williams." ],
      "venue" : "Machine learning, 8(3-4):229–256.",
      "citeRegEx" : "Williams.,? 1992",
      "shortCiteRegEx" : "Williams.",
      "year" : 1992
    }, {
      "title" : "Deep learning architecture search by neuro-cell-based evolution with functionpreserving mutations",
      "author" : [ "Martin Wistuba." ],
      "venue" : "Joint European Conference on Machine Learning and Knowledge Discovery in Databases, pages 243–258. Springer.",
      "citeRegEx" : "Wistuba.,? 2018",
      "shortCiteRegEx" : "Wistuba.",
      "year" : 2018
    }, {
      "title" : "Beto, bentz, becas: The surprising cross-lingual effectiveness of BERT",
      "author" : [ "Shijie Wu", "Mark Dredze." ],
      "venue" : "Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natu-",
      "citeRegEx" : "Wu and Dredze.,? 2019",
      "shortCiteRegEx" : "Wu and Dredze.",
      "year" : 2019
    }, {
      "title" : "Genetic cnn",
      "author" : [ "L. Xie", "A. Yuille." ],
      "venue" : "2017 IEEE International Conference on Computer Vision (ICCV), pages 1388–1397.",
      "citeRegEx" : "Xie and Yuille.,? 2017",
      "shortCiteRegEx" : "Xie and Yuille.",
      "year" : 2017
    }, {
      "title" : "BERT post-training for review reading comprehension and aspect-based sentiment analysis",
      "author" : [ "Hu Xu", "Bing Liu", "Lei Shu", "Philip Yu." ],
      "venue" : "Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics:",
      "citeRegEx" : "Xu et al\\.,? 2019",
      "shortCiteRegEx" : "Xu et al\\.",
      "year" : 2019
    }, {
      "title" : "Double embeddings and CNN-based sequence labeling for aspect extraction",
      "author" : [ "Hu Xu", "Bing Liu", "Lei Shu", "Philip S. Yu." ],
      "venue" : "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers), pages 592–",
      "citeRegEx" : "Xu et al\\.,? 2018",
      "shortCiteRegEx" : "Xu et al\\.",
      "year" : 2018
    }, {
      "title" : "LUKE: Deep contextualized entity representations with entityaware self-attention",
      "author" : [ "Ikuya Yamada", "Akari Asai", "Hiroyuki Shindo", "Hideaki Takeda", "Yuji Matsumoto." ],
      "venue" : "Proceedings of the 2020 Conference on Empirical Methods in Natural Lan-",
      "citeRegEx" : "Yamada et al\\.,? 2020",
      "shortCiteRegEx" : "Yamada et al\\.",
      "year" : 2020
    }, {
      "title" : "Xlnet: Generalized autoregressive pretraining for language understanding",
      "author" : [ "Zhilin Yang", "Zihang Dai", "Yiming Yang", "Jaime Carbonell", "Russ R Salakhutdinov", "Quoc V Le." ],
      "venue" : "Advances in neural information processing systems, pages 5753–5763.",
      "citeRegEx" : "Yang et al\\.,? 2019",
      "shortCiteRegEx" : "Yang et al\\.",
      "year" : 2019
    }, {
      "title" : "Named entity recognition as dependency parsing",
      "author" : [ "Juntao Yu", "Bernd Bohnet", "Massimo Poesio." ],
      "venue" : "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages 6470– 6476, Online. Association for Computational Lin-",
      "citeRegEx" : "Yu et al\\.,? 2020",
      "shortCiteRegEx" : "Yu et al\\.",
      "year" : 2020
    }, {
      "title" : "Efficient second-order TreeCRF for neural dependency parsing",
      "author" : [ "Yu Zhang", "Zhenghua Li", "Min Zhang." ],
      "venue" : "Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages 3295–3305, Online. Association for Computa-",
      "citeRegEx" : "Zhang et al\\.,? 2020",
      "shortCiteRegEx" : "Zhang et al\\.",
      "year" : 2020
    }, {
      "title" : "Practical block-wise neural network architecture generation",
      "author" : [ "Zhao Zhong", "Junjie Yan", "Wei Wu", "Jing Shao", "Cheng-Lin Liu." ],
      "venue" : "Proceedings of the IEEE conference on computer vision and pattern recognition, pages 2423–2432.",
      "citeRegEx" : "Zhong et al\\.,? 2018",
      "shortCiteRegEx" : "Zhong et al\\.",
      "year" : 2018
    }, {
      "title" : "Head-Driven Phrase Structure Grammar parsing on Penn Treebank",
      "author" : [ "Junru Zhou", "Hai Zhao." ],
      "venue" : "Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 2396–2408, Florence, Italy. Association for Compu-",
      "citeRegEx" : "Zhou and Zhao.,? 2019",
      "shortCiteRegEx" : "Zhou and Zhao.",
      "year" : 2019
    }, {
      "title" : "Autotrans: Automating transformer design via reinforced architecture search",
      "author" : [ "Wei Zhu", "Xiaoling Wang", "Xipeng Qiu", "Yuan Ni", "Guotong Xie." ],
      "venue" : "arXiv preprint arXiv:2009.02070.",
      "citeRegEx" : "Zhu et al\\.,? 2020",
      "shortCiteRegEx" : "Zhu et al\\.",
      "year" : 2020
    }, {
      "title" : "Neural architecture search with reinforcement learning",
      "author" : [ "Barret Zoph", "Quoc V Le." ],
      "venue" : "International Conference on Learning Representations.",
      "citeRegEx" : "Zoph and Le.,? 2017",
      "shortCiteRegEx" : "Zoph and Le.",
      "year" : 2017
    }, {
      "title" : "Learning transferable architectures for scalable image recognition",
      "author" : [ "Barret Zoph", "Vijay Vasudevan", "Jonathon Shlens", "Quoc V Le." ],
      "venue" : "Proceedings of the IEEE conference on computer vision and pattern recognition, pages 8697–8710.",
      "citeRegEx" : "Zoph et al\\.,? 2018",
      "shortCiteRegEx" : "Zoph et al\\.",
      "year" : 2018
    }, {
      "title" : "2019c) huggingface.co/roberta-large XLNet",
      "author" : [ "Liu" ],
      "venue" : null,
      "citeRegEx" : "Liu,? \\Q2019\\E",
      "shortCiteRegEx" : "Liu",
      "year" : 2019
    } ],
    "referenceMentions" : [ {
      "referenceID" : 55,
      "context" : "Approaches based on contextualized embeddings, such as ELMo (Peters et al., 2018), Flair (Akbik et al.",
      "startOffset" : 60,
      "endOffset" : 81
    }, {
      "referenceID" : 1,
      "context" : ", 2018), Flair (Akbik et al., 2018), BERT (Devlin et al.",
      "startOffset" : 15,
      "endOffset" : 35
    }, {
      "referenceID" : 11,
      "context" : ", 2018), BERT (Devlin et al., 2019), and XLM-R (Conneau et al.",
      "startOffset" : 14,
      "endOffset" : 35
    }, {
      "referenceID" : 9,
      "context" : ", 2019), and XLM-R (Conneau et al., 2020), have been consistently raising the state-of-the-art",
      "startOffset" : 19,
      "endOffset" : 41
    }, {
      "referenceID" : 47,
      "context" : "(Mikolov et al., 2013) and character embeddings (Santos and Zadrozny, 2014)) can further improve performance (Peters et al.",
      "startOffset" : 0,
      "endOffset" : 22
    }, {
      "referenceID" : 65,
      "context" : ", 2013) and character embeddings (Santos and Zadrozny, 2014)) can further improve performance (Peters et al.",
      "startOffset" : 33,
      "endOffset" : 60
    }, {
      "referenceID" : 55,
      "context" : ", 2013) and character embeddings (Santos and Zadrozny, 2014)) can further improve performance (Peters et al., 2018; Akbik et al., 2018; Straková et al., 2019; Wang et al., 2020b).",
      "startOffset" : 94,
      "endOffset" : 178
    }, {
      "referenceID" : 1,
      "context" : ", 2013) and character embeddings (Santos and Zadrozny, 2014)) can further improve performance (Peters et al., 2018; Akbik et al., 2018; Straková et al., 2019; Wang et al., 2020b).",
      "startOffset" : 94,
      "endOffset" : 178
    }, {
      "referenceID" : 69,
      "context" : ", 2013) and character embeddings (Santos and Zadrozny, 2014)) can further improve performance (Peters et al., 2018; Akbik et al., 2018; Straková et al., 2019; Wang et al., 2020b).",
      "startOffset" : 94,
      "endOffset" : 178
    }, {
      "referenceID" : 62,
      "context" : "Neural architecture search (NAS) is an active area of research in deep learning to automatically search for better model architectures, and has achieved state-of-the-art performance on various tasks in computer vision, such as image classification (Real et al., 2019), semantic segmentation",
      "startOffset" : 248,
      "endOffset" : 267
    }, {
      "referenceID" : 37,
      "context" : "(Liu et al., 2019a), and object detection (Ghiasi et al.",
      "startOffset" : 0,
      "endOffset" : 19
    }, {
      "referenceID" : 99,
      "context" : "In natural language processing, NAS has been successfully applied to find better RNN structures (Zoph and Le, 2017; Pham et al., 2018b) and recently better transformer structures (So et al.",
      "startOffset" : 96,
      "endOffset" : 135
    }, {
      "referenceID" : 57,
      "context" : "In natural language processing, NAS has been successfully applied to find better RNN structures (Zoph and Le, 2017; Pham et al., 2018b) and recently better transformer structures (So et al.",
      "startOffset" : 96,
      "endOffset" : 135
    }, {
      "referenceID" : 67,
      "context" : ", 2018b) and recently better transformer structures (So et al., 2019; Zhu et al., 2020).",
      "startOffset" : 52,
      "endOffset" : 87
    }, {
      "referenceID" : 98,
      "context" : ", 2018b) and recently better transformer structures (So et al., 2019; Zhu et al., 2020).",
      "startOffset" : 52,
      "endOffset" : 87
    }, {
      "referenceID" : 86,
      "context" : "We use the policy gradient algorithm (Williams, 1992) in reinforcement learning (Sutton and Barto, 1992) to solve the optimization problem.",
      "startOffset" : 37,
      "endOffset" : 53
    }, {
      "referenceID" : 72,
      "context" : "We use the policy gradient algorithm (Williams, 1992) in reinforcement learning (Sutton and Barto, 1992) to solve the optimization problem.",
      "startOffset" : 80,
      "endOffset" : 104
    }, {
      "referenceID" : 71,
      "context" : "Furthermore, when ACE is applied to concatenate pretrained contextualized embeddings fine-tuned on specific tasks, we can achieve state-of-the-art accuracy on 6 structured prediction tasks including Named Entity Recognition (Sundheim, 1995), Part-Of-Speech tagging (DeRose, 1988), chunking (Tjong Kim Sang and Buchholz, 2000), aspect extraction (Hu and Liu, 2004), syntactic dependency parsing (Tesnière,",
      "startOffset" : 224,
      "endOffset" : 240
    }, {
      "referenceID" : 10,
      "context" : "Furthermore, when ACE is applied to concatenate pretrained contextualized embeddings fine-tuned on specific tasks, we can achieve state-of-the-art accuracy on 6 structured prediction tasks including Named Entity Recognition (Sundheim, 1995), Part-Of-Speech tagging (DeRose, 1988), chunking (Tjong Kim Sang and Buchholz, 2000), aspect extraction (Hu and Liu, 2004), syntactic dependency parsing (Tesnière,",
      "startOffset" : 265,
      "endOffset" : 279
    }, {
      "referenceID" : 25,
      "context" : "Furthermore, when ACE is applied to concatenate pretrained contextualized embeddings fine-tuned on specific tasks, we can achieve state-of-the-art accuracy on 6 structured prediction tasks including Named Entity Recognition (Sundheim, 1995), Part-Of-Speech tagging (DeRose, 1988), chunking (Tjong Kim Sang and Buchholz, 2000), aspect extraction (Hu and Liu, 2004), syntactic dependency parsing (Tesnière,",
      "startOffset" : 345,
      "endOffset" : 363
    }, {
      "referenceID" : 52,
      "context" : "1959) and semantic dependency parsing (Oepen et al., 2014) over 21 datasets.",
      "startOffset" : 38,
      "endOffset" : 58
    }, {
      "referenceID" : 47,
      "context" : "Non-contextualized embeddings, such as word2vec (Mikolov et al., 2013), GloVe (Pennington et al.",
      "startOffset" : 48,
      "endOffset" : 70
    }, {
      "referenceID" : 54,
      "context" : ", 2013), GloVe (Pennington et al., 2014), and fastText (Bojanowski et al.",
      "startOffset" : 15,
      "endOffset" : 40
    }, {
      "referenceID" : 5,
      "context" : ", 2014), and fastText (Bojanowski et al., 2017), help lots of NLP tasks.",
      "startOffset" : 22,
      "endOffset" : 47
    }, {
      "referenceID" : 65,
      "context" : "Character embeddings (Santos and Zadrozny, 2014) are trained together with the task and applied in many structured prediction",
      "startOffset" : 21,
      "endOffset" : 48
    }, {
      "referenceID" : 55,
      "context" : "For pretrained contextualized embeddings, ELMo (Peters et al., 2018), a pretrained contextualized word embedding generated with multiple Bidirectional LSTM layers, significantly outperforms previous state-of-the-art",
      "startOffset" : 47,
      "endOffset" : 68
    }, {
      "referenceID" : 78,
      "context" : "(2019) proposed BERT, which encodes contextualized sub-word information by Transformers (Vaswani et al., 2017) and significantly improves the performance on a lot of NLP tasks.",
      "startOffset" : 88,
      "endOffset" : 110
    }, {
      "referenceID" : 4,
      "context" : "Previous work (Baker et al., 2017; Zoph and Le, 2017; Xie and Yuille, 2017) designs a global search space (Elsken et al.",
      "startOffset" : 14,
      "endOffset" : 75
    }, {
      "referenceID" : 99,
      "context" : "Previous work (Baker et al., 2017; Zoph and Le, 2017; Xie and Yuille, 2017) designs a global search space (Elsken et al.",
      "startOffset" : 14,
      "endOffset" : 75
    }, {
      "referenceID" : 89,
      "context" : "Previous work (Baker et al., 2017; Zoph and Le, 2017; Xie and Yuille, 2017) designs a global search space (Elsken et al.",
      "startOffset" : 14,
      "endOffset" : 75
    }, {
      "referenceID" : 15,
      "context" : ", 2017; Zoph and Le, 2017; Xie and Yuille, 2017) designs a global search space (Elsken et al., 2019) which incorporates structures from hand-crafted architectures.",
      "startOffset" : 79,
      "endOffset" : 100
    }, {
      "referenceID" : 73,
      "context" : "Based on the observation that existing hand-crafted architectures contain repeated structures (Szegedy et al., 2016; He et al., 2016; Huang et al., 2017), Zoph et al.",
      "startOffset" : 94,
      "endOffset" : 153
    }, {
      "referenceID" : 24,
      "context" : "Based on the observation that existing hand-crafted architectures contain repeated structures (Szegedy et al., 2016; He et al., 2016; Huang et al., 2017), Zoph et al.",
      "startOffset" : 94,
      "endOffset" : 153
    }, {
      "referenceID" : 26,
      "context" : "Based on the observation that existing hand-crafted architectures contain repeated structures (Szegedy et al., 2016; He et al., 2016; Huang et al., 2017), Zoph et al.",
      "startOffset" : 94,
      "endOffset" : 153
    }, {
      "referenceID" : 4,
      "context" : ", 2018) or use Markov Decision Process (Baker et al., 2017) to decide the hyper-parameter of each structure and decide the input order of each structure.",
      "startOffset" : 39,
      "endOffset" : 59
    }, {
      "referenceID" : 20,
      "context" : "(2019) applied tournament selection (Goldberg and Deb, 1991) for the parent selection while Xie and Yuille (2017) keeps all parents.",
      "startOffset" : 36,
      "endOffset" : 60
    }, {
      "referenceID" : 44,
      "context" : "We use BiLSTM-CRF model (Ma and Hovy, 2016; Lample et al., 2016) for sequence-structured outputs and use BiLSTM-Biaffine model (Dozat and Manning, 2017) for graph-structured outputs:",
      "startOffset" : 24,
      "endOffset" : 64
    }, {
      "referenceID" : 33,
      "context" : "We use BiLSTM-CRF model (Ma and Hovy, 2016; Lample et al., 2016) for sequence-structured outputs and use BiLSTM-Biaffine model (Dozat and Manning, 2017) for graph-structured outputs:",
      "startOffset" : 24,
      "endOffset" : 64
    }, {
      "referenceID" : 12,
      "context" : ", 2016) for sequence-structured outputs and use BiLSTM-Biaffine model (Dozat and Manning, 2017) for graph-structured outputs:",
      "startOffset" : 70,
      "endOffset" : 95
    }, {
      "referenceID" : 15,
      "context" : "The neural architecture search space can be represented as a set of neural networks (Elsken et al., 2019).",
      "startOffset" : 84,
      "endOffset" : 105
    }, {
      "referenceID" : 11,
      "context" : "However, the empirical results (Devlin et al., 2019) do not show a significant difference in accuracy.",
      "startOffset" : 31,
      "endOffset" : 52
    }, {
      "referenceID" : 56,
      "context" : "In NAS, weight sharing (Pham et al., 2018a) shares the weight of structures in training different neural architectures to reduce the training cost.",
      "startOffset" : 23,
      "endOffset" : 43
    }, {
      "referenceID" : 99,
      "context" : "; θL] for the controller instead of using the RNN structure applied in previous approaches (Zoph and Le, 2017; Zoph et al., 2018).",
      "startOffset" : 91,
      "endOffset" : 129
    }, {
      "referenceID" : 100,
      "context" : "; θL] for the controller instead of using the RNN structure applied in previous approaches (Zoph and Le, 2017; Zoph et al., 2018).",
      "startOffset" : 91,
      "endOffset" : 129
    }, {
      "referenceID" : 86,
      "context" : "J(θ) = EP ctrl(a;θ)[R] through the policy gradient method (Williams, 1992).",
      "startOffset" : 58,
      "endOffset" : 74
    }, {
      "referenceID" : 64,
      "context" : "• POS Tagging: We use three datasets, Ritter11-TPOS (Ritter et al., 2011), ARK-Twitter (Gimpel et al.",
      "startOffset" : 52,
      "endOffset" : 73
    }, {
      "referenceID" : 19,
      "context" : ", 2011), ARK-Twitter (Gimpel et al., 2011; Owoputi et al., 2013) and Tweebankv2 (Liu et al.",
      "startOffset" : 21,
      "endOffset" : 64
    }, {
      "referenceID" : 53,
      "context" : ", 2011), ARK-Twitter (Gimpel et al., 2011; Owoputi et al., 2013) and Tweebankv2 (Liu et al.",
      "startOffset" : 21,
      "endOffset" : 64
    }, {
      "referenceID" : 39,
      "context" : ", 2013) and Tweebankv2 (Liu et al., 2018b) datasets (Ritter, ARK and TB-v2 in simplification).",
      "startOffset" : 23,
      "endOffset" : 42
    }, {
      "referenceID" : 45,
      "context" : "0 with the same dataset preprocessing as (Ma et al., 2018).",
      "startOffset" : 41,
      "endOffset" : 58
    }, {
      "referenceID" : 52,
      "context" : "• Semantic Dependency Parsing: We use DM, PAS and PSD datasets for semantic dependency parsing (Oepen et al., 2014) for the SemEval 2015 shared task (Oepen et al.",
      "startOffset" : 95,
      "endOffset" : 115
    }, {
      "referenceID" : 51,
      "context" : ", 2014) for the SemEval 2015 shared task (Oepen et al., 2015).",
      "startOffset" : 41,
      "endOffset" : 61
    }, {
      "referenceID" : 33,
      "context" : "Basic Settings: For the candidates of embeddings on English datasets, we use the languagespecific model for ELMo, Flair, base BERT, GloVe word embeddings, fastText word embeddings, noncontextual character embeddings (Lample et al., 2016), multilingual Flair (M-Flair), M-BERT and XLM-R embeddings.",
      "startOffset" : 216,
      "endOffset" : 237
    }, {
      "referenceID" : 34,
      "context" : "For the second one, we use the random search (Random), a strong baseline in NAS (Li and Talwalkar, 2020).",
      "startOffset" : 80,
      "endOffset" : 104
    }, {
      "referenceID" : 93,
      "context" : "We additionally use XLNet (Yang et al., 2019) and RoBERTa as the candidates of ACE.",
      "startOffset" : 26,
      "endOffset" : 45
    }, {
      "referenceID" : 6,
      "context" : "In NER, we also conduct a comparison on the revised version of German datasets in the CoNLL 2006 shared task (Buchholz and Marsi, 2006).",
      "startOffset" : 109,
      "endOffset" : 135
    }, {
      "referenceID" : 29,
      "context" : "tured prediction (Kim and Rush, 2016; Kuncoro et al., 2016; Wang et al., 2020a, 2021b), leading to models that are both stronger and faster.",
      "startOffset" : 17,
      "endOffset" : 86
    }, {
      "referenceID" : 32,
      "context" : "tured prediction (Kim and Rush, 2016; Kuncoro et al., 2016; Wang et al., 2020a, 2021b), leading to models that are both stronger and faster.",
      "startOffset" : 17,
      "endOffset" : 86
    } ],
    "year" : 2021,
    "abstractText" : "Pretrained contextualized embeddings are powerful word representations for structured prediction tasks. Recent work found that better word representations can be obtained by concatenating different types of embeddings. However, the selection of embeddings to form the best concatenated representation usually varies depending on the task and the collection of candidate embeddings, and the everincreasing number of embedding types makes it a more difficult problem. In this paper, we propose Automated Concatenation of Embeddings (ACE) to automate the process of finding better concatenations of embeddings for structured prediction tasks, based on a formulation inspired by recent progress on neural architecture search. Specifically, a controller alternately samples a concatenation of embeddings, according to its current belief of the effectiveness of individual embedding types in consideration for a task, and updates the belief based on a reward. We follow strategies in reinforcement learning to optimize the parameters of the controller and compute the reward based on the accuracy of a task model, which is fed with the sampled concatenation as input and trained on a task dataset. Empirical results on 6 tasks and 21 datasets show that our approach outperforms strong baselines and achieves state-of-the-art performance with fine-tuned embeddings in all the evaluations.1",
    "creator" : "LaTeX with hyperref"
  }
}
{
  "name" : "2021.acl-long.522.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "DEXPERTS: Decoding-Time Controlled Text Generation with Experts and Anti-Experts",
    "authors" : [ "Alisa Liu", "Maarten Sap", "Ximing Lu", "Swabha Swayamdipta", "Chandra Bhagavatula", "Noah A. Smith", "Yejin Choi" ],
    "emails" : [ "alisaliu@cs.washington.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing, pages 6691–6706\nAugust 1–6, 2021. ©2021 Association for Computational Linguistics\n6691"
    }, {
      "heading" : "1 Introduction",
      "text" : "Controlling the output of pretrained language models (LMs) is crucial for achieving useful and safe language generation applications, such as nonoffensive sentence completion or friendly conversation generation (See et al., 2019; Sheng et al., 2020; Gehman et al., 2020). For example, a safe completion to the prompt “When she rejected his advance, he grabbed...” requires avoiding word choices that could lead to continuations with gender-based violence (e.g., “her”; Figure 1).\nWithout such steering, these language models risk generating mindless and offensive content (Sheng et al., 2019; Holtzman et al., 2020) which hinders their safe deployment (Brockman et al., 2020; Bender et al., 2021). Importantly, as the scale of pretrained LMs increases (e.g., 175B and 1.6T parameters; Brown et al., 2020; Fedus et al.,\n2021), finetuning or re-training approaches are becoming increasingly computationally infeasible for most researchers.\nWe propose DEXPERTS,1 a decoding-time method for controlled text generation based on a\n1DEXPERTS stands for Decoding-time Experts. Our code is available at https://github.com/ alisawuffles/DExperts.\nproduct of experts (Hinton, 2002). Our method combines an out-of-the-box pretrained (“base”) LM with “expert” LMs and/or “anti-expert” LMs, which model text with desirable and undesirable attributes, respectively. By generatively modeling text with particular attributes and directly combining the output distributions from each LM, DEXPERTS leverages subtle signals expressible by language models for effective attribute control, without sacrificing generation fluency or diversity. Moreover, because it operates only on the output of the base LM, DEXPERTS can steer with (anti-)experts of smaller size, even in cases where we do not have full access to the base model (e.g., GPT-3 through an API).\nWe first apply DEXPERTS to the task of language detoxification (§3), by finetuning an expert and an anti-expert on public comments that are humanannotated for toxicity. Our experimental results show that DEXPERTS can successfully avoid toxicity in language generation while preserving output fluency, outperforming existing detoxification methods on both automatic and human evaluations. Moreover, we find that DEXPERTS continues to outperform baselines when employing only an antiexpert and re-using the base model as the expert, making it one of the only methods that can avoid toxicity without annotated examples of non-toxic content. In analysis, we also show that our method successfully avoids toxic degeneration while using just „650 toxic comments, opening avenues for easily customizable anti-experts.\nWe then showcase the generalizability of DEXPERTS by tackling the task of controlling the sentiment of LMs’ output (§4). To this end, we combine a pretrained LM with (anti-)experts modeling positive and negative sentiment. As with language detoxification, DEXPERTS outperforms existing sentiment steering methods on both automatic and human evaluations. Additionally, we show our method is especially effective in the adversarial setting of steering negative prompts toward positive continuations, and vice versa. Finally, we demonstrate a preliminary proof-of-concept using DEXPERTS for stylistic rewriting (§5).\nOur work demonstrates the effectiveness of tuning small LMs on text with desirable and undesirable properties for efficient and effective steering of larger pretrained LMs, and highlights the promise of decoding-time methods for controlled language generation."
    }, {
      "heading" : "2 Experts and Anti-Experts for Controlled Generation",
      "text" : "Given input text as a prompt, the task of controlled text generation is to generate a continuation that flows naturally from the prompt while having the desired attribute (e.g., positive sentiment) but not an undesired one (e.g., toxicity).\nGiven a prompt xăt, the language model computes the logits for the tth token, denoted zt P R|V|, where V is the vocabulary. A probability distribution over the vocabulary is obtained by normalizing and exponentiating zt:\nP pXt | xătq “ softmaxpztq, (1)\nand the next token is generated by sampling xt „ P pXt | xătq."
    }, {
      "heading" : "2.1 DEXPERTS Formalization",
      "text" : "DEXPERTS operates on a pretrained language model M by combining its predictions with an expert M`, which models text with a desirable attribute, and an anti-expert M´, which models text with an undesirable attribute. At time step t, we condition each language model M , M`, and M´ on the prompt xăt to obtain zt, z`t , and z ´ t , respectively. The product-of-experts ensemble is given by:2\nP̃ pXt | xătq “ softmax ` zt ` α ` z`t ´ z´t ˘˘\n(2) where α is a hyperparameter that controls the amount of modification to zt, and can be interpreted as the strength of control over the base model. Equivalently,\nP̃ pXt | xătq9P pXt | xătq ˆ P`pXt | xătq P´pXt | xătq ˙α\n(3) Intuitively, a token will only have high probability if it has high probability under both P and P`, and low probability under P´. We can interpret the ratio P\n`pXt|xătq P´pXt|xătq as a scaling coefficient for\neach token, which is used to modify the original probability predicted for that token."
    }, {
      "heading" : "2.2 Sampling from DEXPERTS",
      "text" : "Sampling fluent output from language models commonly requires truncating the unreliable tail of\n2Though not explored in this paper, this formulation readily accommodates multiple experts and anti-experts, whose logits can be respectively added or subtracted.\nthe probability distribution, as in top-k (Fan et al., 2018) or nucleus sampling (Holtzman et al., 2020). We adapt this intuition to our method by truncating the logits z output by the base model prior to combining with the experts. Formally, let V 1 Ă V denote the set of tokens that are a part of the topk/top-p vocabulary of the base LM at time step t. The truncated logits z1 are given by\nz1rvs “ # zrvs if v P V 1\n´8 otherwise (4)\nBy substituting z with z1 in Equation 2, we have\nP̃ 1pXt | xătq “ softmax ` z1t ` α ` z`t ´ z´t ˘˘\n(5) We obtain our next token xt via pure sampling from the probability distribution P̃ 1pXt | xătq, which has non-zero probability only on tokens in V 1. In this way, adding in the (anti-)experts can be interpreted as modifying the probability distribution over the candidate tokens in V 1, without any chance of reintroducing tokens v R V 1 from the tail of the original probability distribution."
    }, {
      "heading" : "3 Toxicity Avoidance",
      "text" : "Given that large pretrained LMs are at risk of producing toxic content (Sheng et al., 2019; Gehman et al., 2020), steering away from toxic “degeneration” is crucial for their safe deployment. Our approach uses an anti-expert that models overt toxicity, as well as an expert that is finetuned on nontoxic data from the same domain.\nNote that while obtaining an LM that is truly free from social biases is impossible (Fiske, 1993; Lakoff, 1973), the “non-toxic” expert serves the purpose of modeling the same domain of comments as the toxic anti-expert, providing more effective contrast. Nonetheless, we provide an ablation using only a toxic anti-expert and show that it remains effective above all previous baselines."
    }, {
      "heading" : "3.1 Method",
      "text" : "We use GPT-2 Large as our base LM. For our expert and anti-expert, we finetune several sizes of GPT-2 (Small, Medium, Large) on a dataset of humanannotated comments from the Jigsaw Unintended Bias in Toxicity Classification Kaggle challenge.3 We consider an example toxic if ě 50% of annotators marked it as toxic, and nontoxic if none of the annotators mark it as toxic. This toxic dataset\n3https://bit.ly/3cvG5py\nhas „160K comments, and the nontoxic dataset „1.4M comments. Note that our toxic dataset is human-annotated and out-of-domain with respect to the pretraining corpus (WebText for GPT-2).\nWe report results for α “ 2.0, chosen after observing the tradeoff between detoxification and fluency, but show results for other values of α in Appendix D."
    }, {
      "heading" : "3.2 Evaluation",
      "text" : ""
    }, {
      "heading" : "3.2.1 Generation Prompts",
      "text" : "To evaluate the problem of toxic degeneration where a user might unexpectedly receive harmful output from a model, we use a random sample of 10K nontoxic prompts from the RealToxicityPrompts dataset (Gehman et al., 2020).\n3.2.2 Baselines Domain-adaptive pretraining (DAPT; Gururangan et al., 2020) We further pretrain the base model on the non-toxic subset of OpenWebText. This dataset is obtained by scoring the full OpenWebText corpus with the toxicity classifier from Perspective API4 and keeping the least toxic 2 percent of documents, a corpus of about 150K documents, or 63M tokens, following the implementation of this baseline from Gehman et al. (2020).\nPlug-and-play language models (PPLM; Dathathri et al., 2020) PPLM uses gradients from a toxicity classifier to update the LM’s hidden representations. We retrain the classifier to be compatible with our larger base model size, on the same toxicity data used in the original paper.5 Due to the extreme computational expense of PPLM (runtimes are shown in Appendix A.4), we evaluate PPLM on a random subset of 1K prompts.\nGenerative discriminators (GeDi; Krause et al., 2020) GeDi uses a class-conditioned LM to provide classification probabilities for all possible next tokens via Bayes’ rule. We use the toxicity classconditioned LM released by the authors with the recommended generation hyperparameters.\nDEXPERTS (anti-only) We also explore an antiexpert-only ablation of DEXPERTS, by reusing the base model as the expert. To be clear, we substitute z`t “ zt in Equation 1, so that we have\nP̃ pXt | xătq “ softmax ` p1` αqzt ´ αz´t ˘\n(6) 4https://github.com/conversationai/\nperspectiveapi 5https://bit.ly/3yQiCIo\nWe use the toxic anti-expert based on GPT-2 Large and the same hyperparameter value α “ 2.0.\nNon-Toxic Expert Finally, we consider generating directly from the non-toxic expert based on GPT-2 Large.\nFor all baselines, we use nucleus sampling (Holtzman et al., 2020) with p “ 0.9 to generate up to 20 tokens. Note that for our method, nucleus sampling is done as described in §2, by using the nucleus from the base LM. Other training and generation details (e.g., hyperparameters) are described in Appendix A."
    }, {
      "heading" : "3.2.3 Automatic Evaluation",
      "text" : "We evaluate our generations for toxicity, fluency, and diversity. Following previous work (Gehman et al., 2020), we characterize generation toxicity using the toxicity score from Perspective API, along two axes: 1) the maximum toxicity over k “ 25 generations, and 2) the empirical probability of generating a continuation with toxicity ě 0.5 at least once over k “ 25 generations. Generation fluency is measured by the mean perplexity of generated continuations according to a larger pretrained LM, GPT-2 XL. Generation diversity is measured using the mean number of distinct n-grams, normalized by the length of text (Li et al., 2016), among the 25 generations for each prompt. We report Dist-1, Dist-2, and Dist-3 scores for distinct uni-, bi-, and trigrams, respectively.\nResults According to automatic metrics shown in Table 1, DEXPERTS substantially outperforms\nall existing baselines at detoxification. In particular, DEXPERTS (medium, large) are among the most fluent controllable generation methods, while fully preserving output diversity compared to the base model. Moreover, the DEXPERTS (anti-only) ablation continues to outperform baselines at detoxification, although with a loss in fluency and diversity that is likely due to the less effective contrast between the base model and anti-expert. We report the per-generation runtime of each method in Appendix A.4 to demonstrate DEXPERTS’s efficiency compared to other decoding-time methods."
    }, {
      "heading" : "3.2.4 Human Evaluation",
      "text" : "While automatic toxicity classifiers like Perspective API enable the kind of large-scale evaluation required for systematic comparison of methods, an abundance of work shows that their accuracy is far from ideal (Dixon et al., 2018; Sap et al., 2019; Davidson et al., 2019; Hutchinson et al., 2020) in part due to reliance on spurious features, which we discuss in §8. Therefore, we carry out a human evaluation on Amazon Mechanical Turk on 120 random prompts from the 10K nontoxic subset. For each prompt, we compare four pairs of models: DEXPERTS (large) versus GPT-2 Large, PPLM, DAPT, and GeDi. For each pair of models, we randomly sample two generations from each model. This results in a total of 120 prompts ˆ 4pairingsprompt ˆ 2 generations pairing “ 960 comparisons. Each comparison pair is rated by three Turkers, who select which of the two continuations is: (1) less toxic, (2) more fluent, and (3) more topical, i.e., whether the continuation is natural,\nrelevant, and follows logically from the prompt. A screenshot of the user interface is provided in Appendix C.\nResults According to human evaluations, DEXPERTS is rated as less toxic more often than all baselines (Figure 2). In particular, it is rated equally fluent compared to GPT-2, yet less toxic than GPT-2 10% more often than the other way around. See Appendix E for examples of generations."
    }, {
      "heading" : "3.3 Steering GPT-3",
      "text" : "We next use DEXPERTS to steer GPT-3 Ada. Because the OpenAI API6 allows access to only the top 100 log probabilities at each time step, we can only modify and sample from the probability distribution over the top 100 tokens. Nonetheless, results in Table 2 show that DEXPERTS effectively reduces toxicity from GPT-3 to about the same level as when operating on GPT-2. This demonstrates that DEXPERTS requires only the output of the base model, and indeed, the (anti-)experts do not need to be built on the base model."
    }, {
      "heading" : "3.4 Analysis: Dataset Size",
      "text" : "In practice, gathering large amounts of toxic data may be challenging, especially in applications where we would want to customize the anti-expert LM for differing notions of harmful language. To explore the limited data setting, we investigate the relationship between the dataset size used to train the (anti-)experts and its effectiveness at steering the base model. We finetune GPT-2 Large\n6https://openai.com/api/\non five different dataset sizes of exactly 40,960, 204.8K, 1.024M, 5.12M, and 10.24M tokens; for each dataset size, we train the expert and antiexpert for one epoch with checkpoints at every fifth of an epoch. The performance of each ensemble, at every (anti-)expert checkpoint, is show in Figure 3.\nWe can see that even with a dataset of 40,960 tokens („650 comments) corresponding to ă 0.4% of the original toxic dataset, we substantially reduce toxicity from the base model to about the same level as our strongest baseline, GeDi. (On one GPU, this corresponds to „3 minutes of finetuning.) Nonetheless, as the size of the finetuning dataset for (anti-)experts increases, the performance of DEXPERTS increases as well."
    }, {
      "heading" : "4 Sentiment-Controlled Generation",
      "text" : "As a second application we consider the wellstudied task of controlling the polarity of text’s sentiment (e.g., Li et al., 2018; Sudhakar et al., 2019), steering towards either positive or negative sentiment."
    }, {
      "heading" : "4.1 Method",
      "text" : "We use the same pretrained model from §3, GPT-2 Large, as our base LM. We finetune GPT-2 (Small,\nMedium, Large) on a positive sentiment corpus for our positive LM, and on a negative sentiment corpus for our negative LM. We use Stanford Sentiment Treebank (SST-5; Socher et al., 2013), which contains movie reviews labeled by human raters for sentiment on a scale from 1 (very negative) to 5 (very positive). Our positive dataset contains “positive” and “very positive” reviews, and our negative dataset “negative” or “very negative” reviews. Each of these sentiment datasets has about 4K reviews.\nFor ease of notation we consider the positive LM our expert and negative LM our anti-expert, and use α “ ˘3.2 for steering in each direction. The tradeoff between fluency and sentiment control for many values of α is shown in §4.3."
    }, {
      "heading" : "4.2 Evaluation",
      "text" : ""
    }, {
      "heading" : "4.2.1 Generation Prompts",
      "text" : "In order to test our method’s ability to control sentiment beyond the domain that the sentiment experts are trained on (movie reviews), we collect a dataset of 100K naturally occurring prompts from the OpenWebText Corpus (OWT) (Gokaslan and Cohen, 2019). Details are outlined in Appendix B. We generate 25 continuations for each prompt from\nthe base LM, and score them using HuggingFace’s sentiment analysis classifier (Wolf et al., 2020) trained on SST-5 movie reviews. Using these generations from the base LM, we build three datasets of prompts: (1) 5K “neutral” prompts, which lead to 12 or 13 positive continuations, (2) 2.5K “negative” prompts, which lead to 25 negative continuations, and (3) 2.5K “positive” prompts, which lead to 24 or 25 positive continuations. We consider the negative and positive prompts adversarial settings, where the task is to steer toward the opposite sentiment of the prompt."
    }, {
      "heading" : "4.2.2 Baselines",
      "text" : "We consider the same baselines as in §3, along with a new baseline (CTRL; Keskar et al., 2019).\nDAPT Corresponding to our DAPT baseline in §3, we score all documents in OpenWebText with the HuggingFace sentiment classifier, and keep the most positive 2% and most negative 2% (according to the probability of the predicted label) to obtain the positive and negative corpora. We perform another round of pretraining on each corpus to obtain a positive LM and negative LM.\nPPLM As with toxicity §3, we retrain the sentiment classifier for PPLM with a larger embedding size compatible with our base model. The training data used is SST-5. Again, we evaluate PPLM on only 10% of the prompts compared to other models, which are randomly selected: 500 neutral prompts, 250 positive prompts, and 250 negative prompts.\nGeDi We use GeDi with the sentiment classconditioned LMs released by the original authors, which are trained on IMDB movie reviews (Maas et al., 2011). (We find that retraining it on SST-5 results in slightly reduced performance, as discussed in Appendix A.)\nDEXPERTS (anti-only) To explore whether simply steering away from one sentiment will yield the opposite sentiment, we again explore an antiexpert-only version of DEXPERTS. As in §3, we reuse the base model as the expert, and use only a negative anti-expert LM for positive steering, and only a positive anti-expert LM for negative steering. We use α “ ˘2.0 for this setting.\nPositive/Negative Experts Again, we consider decoding directly from the corresponding sentiment expert for positive and negative steering.\nConditional Transformer LM (CTRL; Keskar et al., 2019) To control the sentiment of generations from CTRL , we use the “Reviews” control code and append a rating of “5.0” for positive generations and a rating of “1.0” for negative generations. The sentiment training examples for CTRL came from Amazon reviews (McAuley et al., 2015).\nAs with toxicity experiments (§3), we use nucleus sampling with p “ 0.9, and include our training and generation details in Appendix A."
    }, {
      "heading" : "4.2.3 Automatic Evaluation",
      "text" : "We evaluate our generations for the target sentiment, fluency, and diversity. To estimate sentiment, we use HuggingFace’s sentiment analysis classifier, and report the mean percentage of generations per prompt (out of 25) which are labeled positive (the rest are negative). We evaluate fluency and diversity in the same ways as §3.\nResults As shown in Table 3, DEXPERTS greatly outperforms previous controllable generation methods (PPLM, CTRL, DAPT, GeDi) on both neutral prompts and adversarial prompts. The limited performance of CTRL suggests that the effectiveness of class-conditioned training on domain-specific\ndata is limited to the domain of that data; training on Amazon reviews does not allow generalization outside of the reviews domain. In a similar vein, while the positive and negative experts achieve decent performance (even performing the best on negative prompts), they do so at the expense of much higher output perplexity. This contrast shows two sides of the same coin: we observe that while CTRL acts like a standard language model on out-of-domain prompts (good fluency, poor control), the sentiment experts are highly specialized on movie reviews and tend to steer every generation toward movies (poor fluency, strong control). Meanwhile, DAPT is more effective while maintaining fluency, because its training domain is the same domain as the prompts domain (i.e., OWT), but its performance decreases substantially in the adversarial setting which requires more active steering. We observe that the poor fluency of PPLM is due to occasional generations with extremely high perplexity, suggesting cases of degenerate behavior. DEXPERTS with only an anti-expert is mildly effective on neutral prompts (outperforming or matching the performance of CTRL and PPLM), but works very poorly in the adversarial setting, confirming our intuition that steering away from negative sentiment does not provide sufficiently strong guidance for positive sentiment."
    }, {
      "heading" : "4.2.4 Human Evaluation",
      "text" : "For human evaluation, we randomly choose 30 neutral prompts, 30 positive prompts, and 30 negative prompts, and consider five pairs of models: DEXPERTS versus GPT-2, CTRL, PPLM, DAPT, and GeDi. For each prompt and pairing of models, we sample two generations from each model for each steering direction considered. This results in a total of 120 promptsˆ 5pairingsprompt ˆ 2 generations pairing “ 1200 pairs, each rated by 3 MTurk workers. We ask annotators to select which generation achieves the desired sentiment better, along with the fluency and topicality questions from §3.2.4.\nResults As shown in Figure 4, DEXPERTS is substantially more effective at steering toward positivity on negative prompts while achieving better topicality and better fluency compared to all other baselines, including GPT-2. In the opposite setting of steering toward negativity on positive prompts, the gap in sentiment control performance between DEXPERTS and each of GPT-2, CTRL, DAPT, and PPLM is even more pronounced: DEXPERTS is\nrated better than its comparison 62–78% of the time. While GeDi achieves close to DEXPERTS’ performance in this setting, its topicality and fluency are much worse. The asymmetry, where negative steering appears easier than positive steering for DEXPERTS, is reflected in automatic evaluation as well. We hypothesize that it is easier to derail a positive prompt with negativity than turn something negative into something positive; but to human readers, these negative continuations may be unexpected (a similar observation was made in previous work; Madotto et al., 2020). For the neutral prompts, we see similar trends as those in the automatic and the human adversarial evaluations. Due to space constraints, we include those in Appendix D.2."
    }, {
      "heading" : "4.3 Analysis: Sentiment versus Fluency",
      "text" : "In practice, we may want different levels of sentiment control depending on the application (e.g., aggressively positive marketing pitches versus merely friendly chatbots). Figure 5 shows the relationship between output sentiment and fluency for different choices of α P r´3.4, 3.4s, conditioned on neutral prompts. The smooth tradeoff suggests that α can by adjusted by a practitioner or user, depending on their application. In our experiments, we pick α “ ˘3.2 because the curve becomes less steep, meaning that a greater cost in fluency does not re-\nturn as great of an increase in the desired sentiment. The tradeoff between output toxicity and fluency looks very similar for DEXPERTS detoxification (§3), and is included in Appendix D.1."
    }, {
      "heading" : "5 Stylistic Rewriting with DEXPERTS",
      "text" : "As a preliminary exploration, we go beyond generating text continuations to apply DEXPERTS to stylistic rewriting, i.e., rewriting a sentence in a target style while preserving as much content as possible. We replace the base model with a pretrained\nautoencoder, BART (Lewis et al., 2020), and use GPT-2 Large sentiment (anti-)experts from §4 for steering. At each time step, the autoencoder base model conditions on both the input sequence and the generation-so-far, whereas the (anti-)experts condition on only the latter. As a proof of concept, we show some examples of input/output from this system in Table 4.\nInputÑ Output Examples I love cats and seeing them play with yarn. α“´4.0ÝÝÝÝÝÑ I love cats and seeing them play with rotten cereal.\nOatmilk is tasty and good for the environment. α“´3.5ÝÝÝÝÝÑ Oatmilk is toxic and bad for the environment.\nGreat food but horrible staff and very very rude workers! α“2.0ÝÝÝÝÑ A very nice restaurant\nTable 4: Examples of input/output from a preliminary system that applies DEXPERTS to stylistic rewriting. Recall α ą 0 indicates positive rewriting, and α ă 0 indicates negative rewriting.\nThis exploration suggests that more innovation is required to apply DEXPERTS to stylistic rewriting, but it is a promising direction. We anticipate future work on the subject."
    }, {
      "heading" : "6 Related Work",
      "text" : "The task of controlling the output of a language generation model has been widely studied by previous work (for a review, see Prabhumoye et al., 2020). Prior to using pretrained LMs as a backbone, most work used custom neural models trained for their respective downstream generation tasks, including emotion-aware text generation (Ghosh et al., 2017; Ficler and Goldberg, 2017), attribute-aware product review generation (Dong et al., 2017), and friendly or empathetic dialogue response generation (See et al., 2019; Rashkin et al., 2019).\nSince pretrained LMs have shown impressive text generation ability (Radford et al., 2018, 2019), two directions have emerged to control their language generation: training approaches and decoding-time approaches. Training approaches include finetuning the pretrained LMs on datasets that contain the desired attributes (Gururangan et al., 2020) as well as creating a class-conditioned pretrained LM trained on text with specific attributes control code prefixes (Keskar et al., 2019). In contrast to our method, such approaches can only steer towards desired text attributes, they cannot steer away from them. Additionally, training approaches\nrequire significant computational resources, which may no longer be feasible with the size of more recent pretrained LMs (Brown et al., 2020; Fedus et al., 2021).\nDecoding-time methods, a more lightweight approach, have been used controlling the attributes of generated text, as well as for improving its quality (Li et al., 2016; Holtzman et al., 2018; Welleck et al., 2020). PPLM (Dathathri et al., 2020) is a steering method that updates a pretrained model’s hidden representations according to the gradient of a classifier with respect to the desired class. Unfortunately, this approach is computationally expensive, as shown in this and previous work (Gehman et al., 2020). Contemporaneous with our work, FUDGE (Yang and Klein, 2021) trains classifiers on partial sequences to predict whether an attribute will be satisfied in the future, and uses Bayesian factorization to obtain the attribute-conditioned probability distribution. GeDi (Krause et al., 2020) uses Bayes’ rule similarly, but computes classification probabilities using the output of class-conditioned LMs rather than directly training a classifier. In contrast, our experiments show that directly ensembling LMs’ probabilities as opposed to using them for estimating class probabilities is more effective at steering text generation."
    }, {
      "heading" : "7 Conclusion",
      "text" : "We present DEXPERTS, a method for controlled text generation that reweights the predictions of language models based on expert (and anti-expert) opinions. In experiments for two different tasks, detoxification and sentiment control, we show that our method is able to effectively steer the language model towards the desired generations, while preserving the fluency and diversity of generated text. As applications built on language models become ubiquitous, DEXPERTS demonstrates promise in steering these models toward safe and user-friendly generations."
    }, {
      "heading" : "Acknowledgments",
      "text" : "This research is supported in part by NSF (IIS1714566), DARPA MCS program through NIWC Pacific (N66001-19-2-4031), and Allen Institute for AI. We thank OpenAI, specifically Bianca Martin and Miles Brundage, for providing access to GPT-3 through the OpenAI API Academic Access Program. We also thank UW NLP, AI2 Mosaic, and the anonymous reviewers for helpful feedback."
    }, {
      "heading" : "8 Broader Impact and Ethical Implications",
      "text" : "Our study is motivated by the potential harms of using pretrained language models (Bender et al., 2021), specifically their tendency to generate hateful, offensive, or toxic content (Sheng et al., 2020; Gehman et al., 2020). Part of our work requires automatically detecting toxicity in generated texts, for which we use the Perspective API.7 a commercially deployed toxicity detection tool. However, the mismatch between the construct of toxicity and its operationalization through an automatic classifier can cause biased or unintended model behavior (Jacobs and Wallach, 2021). Specifically, recent work has shown that such hate speech classifiers overestimate the prevalence of toxicity in text that contains a minority identity mention (Hutchinson et al., 2020; Dixon et al., 2018) or text written by racial minorities (Sap et al., 2019; Davidson et al., 2019), therefore having the real possibility of backfiring against its very aim of fairness and inclusive dialogue. To address this limitation, we also perform a human evaluation of toxicity, for which we obtained IRB approval and sought to pay our workers a fair wage („US$7–9/h).\nWe also acknowledge that any controllable detoxification method runs the risk of dual use (Pandya, 2019), specifically, this technology could be used to automatically generate hateful text (e.g., extremist texts; McGuffie and Newhouse, 2020). For a broader discussion of such risks, and of the risks of large pretrained LMs in general, please see Bender et al. (2021).\nNevertheless, toxicity in pretrained LMs is an unsolved issue (Sheng et al., 2019; Gehman et al., 2020). Therefore, we hope future work continues to better define and evaluate the presence of harmful language (e.g., Sap et al., 2020), and to develop systems for mitigating such language that can be personalized to users’ diverse experiences with language (e.g., dealing with reclaimed slurs appropriately; Croom, 2013)."
    }, {
      "heading" : "Appendix Overview",
      "text" : "In this supplemental material, we provide additional information for producing the results of the paper and additional results."
    }, {
      "heading" : "A Modeling Details",
      "text" : "A.1 Out of the Box Models\nWe use HuggingFace Transformers (Wolf et al., 2020) versions of all pretrained models (aside from GPT-3), implemented in the PyTorch deep learning framework. For GPT-3, we use the Ada model which is accessed with the OpenAI API.8\nA.2 Training Details\nAll training is performed on a single NVIDIA Quadro 6000 GPU.\nDEXPERTS Hyperparameters for finetuning (anti-)experts for DEXPERTS are given in Table 5.\nThe finetuning time for each model size is shown in Table 6.\n8https://openai.com/api/\nDAPT For our implementation of DAPT in sentiment experiments (§4), we use HuggingFace’s sentiment analysis classifier to filter documents from OpenWebText () for the most positive 2% and most negative 2% of documents. Because the classifier takes a maximum of 512 tokens as input text, we approximate the sentiment of a document with its first 510 tokens (a start and end token are added by the classifier). The hyperparameters for the additional phase of pretraining on the attribute data is given in Table 5.\nPPLM For our implementation of PPLM in experiments, we retrain the toxicity and sentiment classifiers to be compatible with our base model GPT-2 (large), as the original paper used GPT-2 medium for experiments. We use the same training datasets and hyperparameters as in the original PPLM paper.\nGeDi For toxicity and sentiment steering, we download the class-conditioned language models (based on GPT-2 Medium) made available by the original authors. As an experiment, we also align the finetuning data for the sentiment GeDis and the (anti-)experts used in DEXPERTS by finetuning a new class-conditioned LM on SST-5 data (as opposed to IMDB used by in GeDi). We found slightly lower performance on sentiment control („1-2%) across the settings, and therefore use the original class-conditioned LMs.\nA.3 Dataset Details\nDetails of datasets used for further pretraining in the DAPT baselines are given in Table 8, and those\nfor finetuning our experts and anti-experts are given in Table 9 and Table 10.\nA.4 Generation Details Generation hyperparameters shared among all methods are shown in Table 11. Hyperparameters for PPLM generation are shown in Table 12. Following the recommendation of the authors, we performed a hyperparameter search for step size over the values t0.02, 0.06, 0.10, 0.20, 0.40u, and for number of iterations over the values t10, 20, 40, 60u, over a small sample of twenty nontoxic prompts. We picked step size 0.20 and 10 iterations, for the best tradeoff between toxicity reduction and output fluency. Due to the extreme computational expense of this method, we were not able to repeat the hyperparameter search for sentiment prompts.\nHyperparameters for GeDi generation are shown in Table 13.\nWe compare the runtime for each controllable generation method used in §3 in Table 14, all on a single NVIDIA Quadro 6000 GPU.. We see that\nDEXPERTS takes 2 to 3 times the time as decoding directly from the base model, depending on the size of the (anti-)experts. When using the same model size for the guiding language model as in GeDi (GPT-2 Medium), DEXPERTS is more efficient than GeDi, and both methods are 100ˆ faster than PPLM."
    }, {
      "heading" : "B Collection of Sentiment Prompts",
      "text" : "We build our prompts for sentiment experiments (§4) from the OpenWebText Corpus (Gokaslan and Cohen, 2019), a corpus of English web text scraped from outbound links on Reddit. We randomly sample 100K documents from OpenWebText and tokenize each document into sentences. Following the\ncreation of RealToxicityPrompts (Gehman et al., 2020), we split each sentence into the prompt, consisting of the first half of tokens, and the continuation, consisting of the remaining tokens. We keep only prompts that are between 4 and 10 tokens long (inclusive). For all tokenization, we use the NLTK library (Bird and Loper, 2004). This results in 140M prompts, from which we randomly sample 100K prompts.\nFor each of the 100K prompts, we generate 25 continuations from our base model, GPT-2 (large), and score the continuations for sentiment using the HuggingFace sentiment classifier described in §4. The distribution of prompts with n P r0, 25s positive continuations out of 25 is shown in Figure 6. Interestingly, we observe that more prompts have more negative continuations than positive continuations than vice versa. Based on these generations, we create three sets of prompts as described in §4."
    }, {
      "heading" : "C Human Evaluation",
      "text" : "Our interface for human evaluation is shown in Figure 7. For each category, the annotator is allowed to choose either one of the continuations, or rate the two options as equal."
    }, {
      "heading" : "D Additional Results",
      "text" : "D.1 Toxicity Hyperparameter Control Figure 8 shows the relationship between output toxicity and fluency for different values of α in our method. The relationship is smooth, reflecting the corresponding figure for sentiment in §4.3.\nD.2 Human Evaluation on Neutral Prompts Figure 9 shows the results of human evaluation on sentiment control conditioned on neutral prompts."
    }, {
      "heading" : "E Generation Examples",
      "text" : "Examples of generations from each method are given in Table 15 for detoxification (§3), and Table 16 for sentiment control (§4)."
    } ],
    "references" : [ {
      "title" : "McMillanMajor, and Shmargaret Shmitchell",
      "author" : [ "Emily Bender", "Timnit Gebru", "Angelina" ],
      "venue" : "In Proceedings of the 2021 ACM Confer7https://github.com/conversationai/",
      "citeRegEx" : "Bender et al\\.,? \\Q2021\\E",
      "shortCiteRegEx" : "Bender et al\\.",
      "year" : 2021
    }, {
      "title" : "NLTK: The natural language toolkit",
      "author" : [ "Steven Bird", "Edward Loper." ],
      "venue" : "Proceedings of the ACL Interactive Poster and Demonstration Sessions.",
      "citeRegEx" : "Bird and Loper.,? 2004",
      "shortCiteRegEx" : "Bird and Loper.",
      "year" : 2004
    }, {
      "title" : "OpenAI API",
      "author" : [ "Greg Brockman", "Mira Murati", "Peter Welinder." ],
      "venue" : "Blog post.",
      "citeRegEx" : "Brockman et al\\.,? 2020",
      "shortCiteRegEx" : "Brockman et al\\.",
      "year" : 2020
    }, {
      "title" : "Language models are few-shot",
      "author" : [ "Jeffrey Wu", "Clemens Winter", "Christopher Hesse", "Mark Chen", "E. Sigler", "Mateusz Litwin", "Scott Gray", "Benjamin Chess", "J. Clark", "Christopher Berner", "Sam McCandlish", "A. Radford", "Ilya Sutskever", "Dario Amodei" ],
      "venue" : null,
      "citeRegEx" : "Wu et al\\.,? \\Q2020\\E",
      "shortCiteRegEx" : "Wu et al\\.",
      "year" : 2020
    }, {
      "title" : "How to do things with slurs: Studies in the way of derogatory words",
      "author" : [ "Adam M Croom." ],
      "venue" : "Language & communication.",
      "citeRegEx" : "Croom.,? 2013",
      "shortCiteRegEx" : "Croom.",
      "year" : 2013
    }, {
      "title" : "Plug and play language models: A simple approach to controlled text generation",
      "author" : [ "Sumanth Dathathri", "Andrea Madotto", "Janice Lan", "Jane Hung", "Eric Frank", "Piero Molino", "Jason Yosinski", "Rosanne Liu." ],
      "venue" : "Proceedings of the 2020 International Conference",
      "citeRegEx" : "Dathathri et al\\.,? 2020",
      "shortCiteRegEx" : "Dathathri et al\\.",
      "year" : 2020
    }, {
      "title" : "Racial bias in hate speech and abusive language detection datasets",
      "author" : [ "Thomas Davidson", "Debasmita Bhattacharya", "Ingmar Weber." ],
      "venue" : "Proceedings of the Third Workshop on Abusive Language Online.",
      "citeRegEx" : "Davidson et al\\.,? 2019",
      "shortCiteRegEx" : "Davidson et al\\.",
      "year" : 2019
    }, {
      "title" : "Measuring and mitigating unintended bias in text classification",
      "author" : [ "Lucas Dixon", "John Li", "Jeffrey Sorensen", "Nithum Thain", "Lucy Vasserman." ],
      "venue" : "Proceedings of the 2018 AAAI/ACM Conference on AI, Ethics, and Society (AIES).",
      "citeRegEx" : "Dixon et al\\.,? 2018",
      "shortCiteRegEx" : "Dixon et al\\.",
      "year" : 2018
    }, {
      "title" : "Learning to generate product reviews from attributes",
      "author" : [ "Li Dong", "Shaohan Huang", "Furu Wei", "Mirella Lapata", "Ming Zhou", "Ke Xu." ],
      "venue" : "Proceedings of the 15th Conference of the European Chapter of the Association for Computational Linguistics (EACL).",
      "citeRegEx" : "Dong et al\\.,? 2017",
      "shortCiteRegEx" : "Dong et al\\.",
      "year" : 2017
    }, {
      "title" : "Hierarchical neural story generation",
      "author" : [ "Angela Fan", "Mike Lewis", "Yann Dauphin." ],
      "venue" : "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (ACL).",
      "citeRegEx" : "Fan et al\\.,? 2018",
      "shortCiteRegEx" : "Fan et al\\.",
      "year" : 2018
    }, {
      "title" : "Switch Transformers: Scaling to trillion parameter models with simple and efficient sparsity",
      "author" : [ "William Fedus", "Barret Zoph", "Noam Shazeer." ],
      "venue" : "arXiv.",
      "citeRegEx" : "Fedus et al\\.,? 2021",
      "shortCiteRegEx" : "Fedus et al\\.",
      "year" : 2021
    }, {
      "title" : "Controlling linguistic style aspects in neural language generation",
      "author" : [ "Jessica Ficler", "Yoav Goldberg." ],
      "venue" : "Proceedings of the Workshop on Stylistic Variation.",
      "citeRegEx" : "Ficler and Goldberg.,? 2017",
      "shortCiteRegEx" : "Ficler and Goldberg.",
      "year" : 2017
    }, {
      "title" : "Controlling other people: the impact of power on stereotyping",
      "author" : [ "Susan T Fiske." ],
      "venue" : "American Psychologist.",
      "citeRegEx" : "Fiske.,? 1993",
      "shortCiteRegEx" : "Fiske.",
      "year" : 1993
    }, {
      "title" : "RealToxicityPrompts: Evaluating neural toxic degeneration in language models",
      "author" : [ "Samuel Gehman", "Suchin Gururangan", "Maarten Sap", "Yejin Choi", "Noah A. Smith." ],
      "venue" : "Findings of the Association for Computational Linguistics (EMNLP Findings).",
      "citeRegEx" : "Gehman et al\\.,? 2020",
      "shortCiteRegEx" : "Gehman et al\\.",
      "year" : 2020
    }, {
      "title" : "Affect-LM: A neural language model for customizable affective text generation",
      "author" : [ "Sayan Ghosh", "Mathieu Chollet", "Eugene Laksana", "Louis-Philippe Morency", "Stefan Scherer." ],
      "venue" : "Proceedings of the 55th Annual Meeting of the Association for Compu-",
      "citeRegEx" : "Ghosh et al\\.,? 2017",
      "shortCiteRegEx" : "Ghosh et al\\.",
      "year" : 2017
    }, {
      "title" : "Don’t stop pretraining: Adapt language models to domains and tasks",
      "author" : [ "Suchin Gururangan", "Ana Marasović", "Swabha Swayamdipta", "Kyle Lo", "Iz Beltagy", "Doug Downey", "Noah A. Smith." ],
      "venue" : "Proceedings of the 58th Annual Meeting of the",
      "citeRegEx" : "Gururangan et al\\.,? 2020",
      "shortCiteRegEx" : "Gururangan et al\\.",
      "year" : 2020
    }, {
      "title" : "Training products of experts by minimizing contrastive divergence",
      "author" : [ "Geoffrey E. Hinton." ],
      "venue" : "Neural Computation.",
      "citeRegEx" : "Hinton.,? 2002",
      "shortCiteRegEx" : "Hinton.",
      "year" : 2002
    }, {
      "title" : "Learning to write with cooperative discriminators",
      "author" : [ "Ari Holtzman", "Jan Buys", "Maxwell Forbes", "Antoine Bosselut", "David Golub", "Yejin Choi." ],
      "venue" : "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (ACL).",
      "citeRegEx" : "Holtzman et al\\.,? 2018",
      "shortCiteRegEx" : "Holtzman et al\\.",
      "year" : 2018
    }, {
      "title" : "The curious case of neural text degeneration",
      "author" : [ "Ari Holtzman", "Jan Buys", "Maxwell Forbes", "Yejin Choi." ],
      "venue" : "Proceedings of the Eighth International Conference on Learning Representations (ICLR).",
      "citeRegEx" : "Holtzman et al\\.,? 2020",
      "shortCiteRegEx" : "Holtzman et al\\.",
      "year" : 2020
    }, {
      "title" : "Social biases in NLP models as barriers for persons with disabilities",
      "author" : [ "Ben Hutchinson", "Vinodkumar Prabhakaran", "Emily Denton", "Kellie Webster", "Yu Zhong", "Stephen Denuyl." ],
      "venue" : "Proceedings of the 58th Annual Meeting of the Association for Compu-",
      "citeRegEx" : "Hutchinson et al\\.,? 2020",
      "shortCiteRegEx" : "Hutchinson et al\\.",
      "year" : 2020
    }, {
      "title" : "Measurement and fairness",
      "author" : [ "Abigail Z. Jacobs", "Hannah Wallach." ],
      "venue" : "Proceedings of the 2021 ACM Conference on Fairness, Accountability, and Transparency (FAccT).",
      "citeRegEx" : "Jacobs and Wallach.,? 2021",
      "shortCiteRegEx" : "Jacobs and Wallach.",
      "year" : 2021
    }, {
      "title" : "CTRL: A conditional transformer language model for controllable generation",
      "author" : [ "Nitish Shirish Keskar", "Bryan McCann", "Lav Varshney", "Caiming Xiong", "Richard Socher." ],
      "venue" : "arXiv.",
      "citeRegEx" : "Keskar et al\\.,? 2019",
      "shortCiteRegEx" : "Keskar et al\\.",
      "year" : 2019
    }, {
      "title" : "GeDi: Generative discriminator guided sequence generation",
      "author" : [ "Ben Krause", "Akhilesh Deepak Gotmare", "Bryan McCann", "Nitish Shirish Keskar", "Shafiq Joty", "Richard Socher", "Nazneen Fatema Rajani." ],
      "venue" : "arXiv.",
      "citeRegEx" : "Krause et al\\.,? 2020",
      "shortCiteRegEx" : "Krause et al\\.",
      "year" : 2020
    }, {
      "title" : "Language and woman’s place",
      "author" : [ "Robin Lakoff." ],
      "venue" : "Language in Society.",
      "citeRegEx" : "Lakoff.,? 1973",
      "shortCiteRegEx" : "Lakoff.",
      "year" : 1973
    }, {
      "title" : "BART: Denoising sequence-to-sequence pretraining for natural language",
      "author" : [ "Mike Lewis", "Yinhan Liu", "Naman Goyal", "Marjan Ghazvininejad", "Abdelrahman Mohamed", "Omer Levy", "Veselin Stoyanov", "Luke Zettlemoyer" ],
      "venue" : null,
      "citeRegEx" : "Lewis et al\\.,? \\Q2020\\E",
      "shortCiteRegEx" : "Lewis et al\\.",
      "year" : 2020
    }, {
      "title" : "A diversity-promoting objective function for neural conversation models",
      "author" : [ "Jiwei Li", "Michel Galley", "Chris Brockett", "Jianfeng Gao", "Bill Dolan." ],
      "venue" : "Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational",
      "citeRegEx" : "Li et al\\.,? 2016",
      "shortCiteRegEx" : "Li et al\\.",
      "year" : 2016
    }, {
      "title" : "Delete, retrieve, generate: a simple approach to sentiment and style transfer",
      "author" : [ "Juncen Li", "Robin Jia", "He He", "Percy Liang." ],
      "venue" : "Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics (NAACL).",
      "citeRegEx" : "Li et al\\.,? 2018",
      "shortCiteRegEx" : "Li et al\\.",
      "year" : 2018
    }, {
      "title" : "Learning word vectors for sentiment analysis",
      "author" : [ "Andrew L. Maas", "Raymond E. Daly", "Peter T. Pham", "Dan Huang", "Andrew Y. Ng", "Christopher Potts." ],
      "venue" : "Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics (ACL).",
      "citeRegEx" : "Maas et al\\.,? 2011",
      "shortCiteRegEx" : "Maas et al\\.",
      "year" : 2011
    }, {
      "title" : "Plug-and-play conversational models",
      "author" : [ "Andrea Madotto", "Etsuko Ishii", "Zhaojiang Lin", "Sumanth Dathathri", "Pascale Fung." ],
      "venue" : "Findings of the Association for Computational Linguistics (EMNLP Findings).",
      "citeRegEx" : "Madotto et al\\.,? 2020",
      "shortCiteRegEx" : "Madotto et al\\.",
      "year" : 2020
    }, {
      "title" : "Image-based recommendations on styles and substitutes",
      "author" : [ "Julian McAuley", "Christopher Targett", "Qinfeng Shi", "Anton van den Hengel." ],
      "venue" : "Proceedings of the 38th International ACM SIGIR Conference on Research and Development in Information",
      "citeRegEx" : "McAuley et al\\.,? 2015",
      "shortCiteRegEx" : "McAuley et al\\.",
      "year" : 2015
    }, {
      "title" : "The radicalization risks of gpt-3 and advanced neural language models",
      "author" : [ "Kris McGuffie", "Alex Newhouse." ],
      "venue" : "arXiv.",
      "citeRegEx" : "McGuffie and Newhouse.,? 2020",
      "shortCiteRegEx" : "McGuffie and Newhouse.",
      "year" : 2020
    }, {
      "title" : "The dual-use dilemma of artificial intelligence",
      "author" : [ "Jayshree Pandya." ],
      "venue" : "Forbes Magazine.",
      "citeRegEx" : "Pandya.,? 2019",
      "shortCiteRegEx" : "Pandya.",
      "year" : 2019
    }, {
      "title" : "Exploring controllable text generation techniques",
      "author" : [ "Shrimai Prabhumoye", "Alan W Black", "Ruslan Salakhutdinov." ],
      "venue" : "Proceedings of the 28th International Conference on Computational Linguistics (COLING).",
      "citeRegEx" : "Prabhumoye et al\\.,? 2020",
      "shortCiteRegEx" : "Prabhumoye et al\\.",
      "year" : 2020
    }, {
      "title" : "Improving language understanding by generative pre-training",
      "author" : [ "Alec Radford", "Karthik Narasimhan", "Tim Salimans", "Ilya Sutskever." ],
      "venue" : "Preprint.",
      "citeRegEx" : "Radford et al\\.,? 2018",
      "shortCiteRegEx" : "Radford et al\\.",
      "year" : 2018
    }, {
      "title" : "Language models are unsupervised multitask learners",
      "author" : [ "Alec Radford", "Jeffrey Wu", "Rewon Child", "David Luan", "Dario Amodei", "Ilya Sutskever." ],
      "venue" : "Preprint.",
      "citeRegEx" : "Radford et al\\.,? 2019",
      "shortCiteRegEx" : "Radford et al\\.",
      "year" : 2019
    }, {
      "title" : "Towards empathetic opendomain conversation models: A new benchmark",
      "author" : [ "Hannah Rashkin", "Eric Michael Smith", "Margaret Li", "Y-Lan Boureau" ],
      "venue" : null,
      "citeRegEx" : "Rashkin et al\\.,? \\Q2019\\E",
      "shortCiteRegEx" : "Rashkin et al\\.",
      "year" : 2019
    }, {
      "title" : "The risk of racial bias in hate speech detection",
      "author" : [ "Maarten Sap", "Dallas Card", "Saadia Gabriel", "Yejin Choi", "Noah A. Smith." ],
      "venue" : "Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics (ACL).",
      "citeRegEx" : "Sap et al\\.,? 2019",
      "shortCiteRegEx" : "Sap et al\\.",
      "year" : 2019
    }, {
      "title" : "Social bias frames: Reasoning about social and power implications of language",
      "author" : [ "Maarten Sap", "Saadia Gabriel", "Lianhui Qin", "Dan Jurafsky", "Noah A. Smith", "Yejin Choi." ],
      "venue" : "Proceedings of the 58th Annual Meeting of the Association for Compu-",
      "citeRegEx" : "Sap et al\\.,? 2020",
      "shortCiteRegEx" : "Sap et al\\.",
      "year" : 2020
    }, {
      "title" : "What makes a good conversation? how controllable attributes affect human judgments",
      "author" : [ "Abigail See", "Stephen Roller", "Douwe Kiela", "Jason Weston." ],
      "venue" : "Proceedings of the 2019 Conference of the North American Chapter of the Association for Computa-",
      "citeRegEx" : "See et al\\.,? 2019",
      "shortCiteRegEx" : "See et al\\.",
      "year" : 2019
    }, {
      "title" : "Towards Controllable Biases in Language Generation",
      "author" : [ "Emily Sheng", "Kai-Wei Chang", "Prem Natarajan", "Nanyun Peng." ],
      "venue" : "Findings of the Association for Computational Linguistics (EMNLP Findings).",
      "citeRegEx" : "Sheng et al\\.,? 2020",
      "shortCiteRegEx" : "Sheng et al\\.",
      "year" : 2020
    }, {
      "title" : "The woman worked as a babysitter: On biases in language generation",
      "author" : [ "Emily Sheng", "Kai-Wei Chang", "Premkumar Natarajan", "Nanyun Peng." ],
      "venue" : "Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th In-",
      "citeRegEx" : "Sheng et al\\.,? 2019",
      "shortCiteRegEx" : "Sheng et al\\.",
      "year" : 2019
    }, {
      "title" : "Recursive deep models for semantic compositionality over a sentiment treebank",
      "author" : [ "Richard Socher", "Alex Perelygin", "Jean Wu", "Jason Chuang", "Christopher D. Manning", "Andrew Ng", "Christopher Potts." ],
      "venue" : "Proceedings of the 2013 Conference on",
      "citeRegEx" : "Socher et al\\.,? 2013",
      "shortCiteRegEx" : "Socher et al\\.",
      "year" : 2013
    }, {
      "title" : "Transforming” delete, retrieve, generate approach for controlled text style transfer",
      "author" : [ "Akhilesh Sudhakar", "Bhargav Upadhyay", "Arjun Maheswaran." ],
      "venue" : "Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and",
      "citeRegEx" : "Sudhakar et al\\.,? 2019",
      "shortCiteRegEx" : "Sudhakar et al\\.",
      "year" : 2019
    }, {
      "title" : "Neural text generation with unlikelihood training",
      "author" : [ "Sean Welleck", "Ilia Kulikov", "Stephen Roller", "Emily Dinan", "Kyunghyun Cho", "Jason Weston." ],
      "venue" : "Proceedings of the Eighth International Conference on Learning Representations (ICLR).",
      "citeRegEx" : "Welleck et al\\.,? 2020",
      "shortCiteRegEx" : "Welleck et al\\.",
      "year" : 2020
    }, {
      "title" : "Transformers: State-of-the-art natural language processing",
      "author" : [ "Teven Le Scao", "Sylvain Gugger", "Mariama Drame", "Quentin Lhoest", "Alexander Rush." ],
      "venue" : "Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing",
      "citeRegEx" : "Scao et al\\.,? 2020",
      "shortCiteRegEx" : "Scao et al\\.",
      "year" : 2020
    }, {
      "title" : "FUDGE: Controlled text generation with future discriminators",
      "author" : [ "Kevin Yang", "Dan Klein." ],
      "venue" : "Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics (NAACL).",
      "citeRegEx" : "Yang and Klein.,? 2021",
      "shortCiteRegEx" : "Yang and Klein.",
      "year" : 2021
    } ],
    "referenceMentions" : [ {
      "referenceID" : 38,
      "context" : "Controlling the output of pretrained language models (LMs) is crucial for achieving useful and safe language generation applications, such as nonoffensive sentence completion or friendly conversation generation (See et al., 2019; Sheng et al., 2020; Gehman et al., 2020).",
      "startOffset" : 211,
      "endOffset" : 270
    }, {
      "referenceID" : 39,
      "context" : "Controlling the output of pretrained language models (LMs) is crucial for achieving useful and safe language generation applications, such as nonoffensive sentence completion or friendly conversation generation (See et al., 2019; Sheng et al., 2020; Gehman et al., 2020).",
      "startOffset" : 211,
      "endOffset" : 270
    }, {
      "referenceID" : 13,
      "context" : "Controlling the output of pretrained language models (LMs) is crucial for achieving useful and safe language generation applications, such as nonoffensive sentence completion or friendly conversation generation (See et al., 2019; Sheng et al., 2020; Gehman et al., 2020).",
      "startOffset" : 211,
      "endOffset" : 270
    }, {
      "referenceID" : 40,
      "context" : "Without such steering, these language models risk generating mindless and offensive content (Sheng et al., 2019; Holtzman et al., 2020) which hinders their safe deployment (Brockman et al.",
      "startOffset" : 92,
      "endOffset" : 135
    }, {
      "referenceID" : 18,
      "context" : "Without such steering, these language models risk generating mindless and offensive content (Sheng et al., 2019; Holtzman et al., 2020) which hinders their safe deployment (Brockman et al.",
      "startOffset" : 92,
      "endOffset" : 135
    }, {
      "referenceID" : 2,
      "context" : ", 2020) which hinders their safe deployment (Brockman et al., 2020; Bender et al., 2021).",
      "startOffset" : 44,
      "endOffset" : 88
    }, {
      "referenceID" : 0,
      "context" : ", 2020) which hinders their safe deployment (Brockman et al., 2020; Bender et al., 2021).",
      "startOffset" : 44,
      "endOffset" : 88
    }, {
      "referenceID" : 9,
      "context" : "6693 the probability distribution, as in top-k (Fan et al., 2018) or nucleus sampling (Holtzman et al.",
      "startOffset" : 47,
      "endOffset" : 65
    }, {
      "referenceID" : 40,
      "context" : "Given that large pretrained LMs are at risk of producing toxic content (Sheng et al., 2019; Gehman et al., 2020), steering away from toxic “degener-",
      "startOffset" : 71,
      "endOffset" : 112
    }, {
      "referenceID" : 13,
      "context" : "Given that large pretrained LMs are at risk of producing toxic content (Sheng et al., 2019; Gehman et al., 2020), steering away from toxic “degener-",
      "startOffset" : 71,
      "endOffset" : 112
    }, {
      "referenceID" : 12,
      "context" : "Note that while obtaining an LM that is truly free from social biases is impossible (Fiske, 1993; Lakoff, 1973), the “non-toxic” expert serves the purpose of modeling the same domain of comments as the toxic anti-expert, providing more effective contrast.",
      "startOffset" : 84,
      "endOffset" : 111
    }, {
      "referenceID" : 23,
      "context" : "Note that while obtaining an LM that is truly free from social biases is impossible (Fiske, 1993; Lakoff, 1973), the “non-toxic” expert serves the purpose of modeling the same domain of comments as the toxic anti-expert, providing more effective contrast.",
      "startOffset" : 84,
      "endOffset" : 111
    }, {
      "referenceID" : 13,
      "context" : "where a user might unexpectedly receive harmful output from a model, we use a random sample of 10K nontoxic prompts from the RealToxicityPrompts dataset (Gehman et al., 2020).",
      "startOffset" : 153,
      "endOffset" : 174
    }, {
      "referenceID" : 15,
      "context" : "Domain-adaptive pretraining (DAPT; Gururangan et al., 2020) We further pretrain the base model on the non-toxic subset of OpenWebText.",
      "startOffset" : 28,
      "endOffset" : 59
    }, {
      "referenceID" : 5,
      "context" : "Plug-and-play language models (PPLM; Dathathri et al., 2020) PPLM uses gradients from a toxicity classifier to update the LM’s hidden representations.",
      "startOffset" : 30,
      "endOffset" : 60
    }, {
      "referenceID" : 22,
      "context" : "Generative discriminators (GeDi; Krause et al., 2020) GeDi uses a class-conditioned LM to provide classification probabilities for all possible next tokens via Bayes’ rule.",
      "startOffset" : 26,
      "endOffset" : 53
    }, {
      "referenceID" : 13,
      "context" : "All models are evaluated on a dataset of 10K nontoxic prompts from RealToxicityPrompts (Gehman et al., 2020), except PPLM, which is evaluated on a subset of 1K prompts, due to the greater computational expense.",
      "startOffset" : 87,
      "endOffset" : 108
    }, {
      "referenceID" : 18,
      "context" : "For all baselines, we use nucleus sampling (Holtzman et al., 2020) with p “ 0.",
      "startOffset" : 43,
      "endOffset" : 66
    }, {
      "referenceID" : 13,
      "context" : "Following previous work (Gehman et al., 2020), we characterize generation toxicity using the toxicity score from Perspective API, along two axes: 1) the maximum toxicity over k “ 25 generations, and 2) the empirical probability of generating a continuation with toxicity ě 0.",
      "startOffset" : 24,
      "endOffset" : 45
    }, {
      "referenceID" : 25,
      "context" : "Generation diversity is measured using the mean number of distinct n-grams, normalized by the length of text (Li et al., 2016), among the 25 generations for each prompt.",
      "startOffset" : 109,
      "endOffset" : 126
    }, {
      "referenceID" : 7,
      "context" : "While automatic toxicity classifiers like Perspective API enable the kind of large-scale evaluation required for systematic comparison of methods, an abundance of work shows that their accuracy is far from ideal (Dixon et al., 2018; Sap et al., 2019; Davidson et al., 2019; Hutchinson et al., 2020) in part due to reliance on spurious features, which we discuss in §8.",
      "startOffset" : 212,
      "endOffset" : 298
    }, {
      "referenceID" : 36,
      "context" : "While automatic toxicity classifiers like Perspective API enable the kind of large-scale evaluation required for systematic comparison of methods, an abundance of work shows that their accuracy is far from ideal (Dixon et al., 2018; Sap et al., 2019; Davidson et al., 2019; Hutchinson et al., 2020) in part due to reliance on spurious features, which we discuss in §8.",
      "startOffset" : 212,
      "endOffset" : 298
    }, {
      "referenceID" : 6,
      "context" : "While automatic toxicity classifiers like Perspective API enable the kind of large-scale evaluation required for systematic comparison of methods, an abundance of work shows that their accuracy is far from ideal (Dixon et al., 2018; Sap et al., 2019; Davidson et al., 2019; Hutchinson et al., 2020) in part due to reliance on spurious features, which we discuss in §8.",
      "startOffset" : 212,
      "endOffset" : 298
    }, {
      "referenceID" : 19,
      "context" : "While automatic toxicity classifiers like Perspective API enable the kind of large-scale evaluation required for systematic comparison of methods, an abundance of work shows that their accuracy is far from ideal (Dixon et al., 2018; Sap et al., 2019; Davidson et al., 2019; Hutchinson et al., 2020) in part due to reliance on spurious features, which we discuss in §8.",
      "startOffset" : 212,
      "endOffset" : 298
    }, {
      "referenceID" : 42,
      "context" : "As a second application we consider the wellstudied task of controlling the polarity of text’s sentiment (e.g., Li et al., 2018; Sudhakar et al., 2019), steering towards either positive or negative sentiment.",
      "startOffset" : 105,
      "endOffset" : 151
    }, {
      "referenceID" : 41,
      "context" : "We use Stanford Sentiment Treebank (SST-5; Socher et al., 2013), which contains movie reviews labeled by human raters for sentiment on a scale from 1 (very negative) to 5 (very positive).",
      "startOffset" : 35,
      "endOffset" : 63
    }, {
      "referenceID" : 21,
      "context" : "We consider the same baselines as in §3, along with a new baseline (CTRL; Keskar et al., 2019).",
      "startOffset" : 67,
      "endOffset" : 94
    }, {
      "referenceID" : 27,
      "context" : "GeDi We use GeDi with the sentiment classconditioned LMs released by the original authors, which are trained on IMDB movie reviews (Maas et al., 2011).",
      "startOffset" : 131,
      "endOffset" : 150
    }, {
      "referenceID" : 21,
      "context" : "Conditional Transformer LM (CTRL; Keskar et al., 2019) To control the sentiment of generations from CTRL , we use the “Reviews” control code and append a rating of “5.",
      "startOffset" : 27,
      "endOffset" : 54
    }, {
      "referenceID" : 29,
      "context" : "The sentiment training examples for CTRL came from Amazon reviews (McAuley et al., 2015).",
      "startOffset" : 66,
      "endOffset" : 88
    }, {
      "referenceID" : 28,
      "context" : "We hypothesize that it is easier to derail a positive prompt with negativity than turn something negative into something positive; but to human readers, these negative continuations may be unexpected (a similar observation was made in previous work; Madotto et al., 2020).",
      "startOffset" : 200,
      "endOffset" : 271
    }, {
      "referenceID" : 24,
      "context" : "6699 autoencoder, BART (Lewis et al., 2020), and use GPT-2 Large sentiment (anti-)experts from §4 for steering.",
      "startOffset" : 23,
      "endOffset" : 43
    }, {
      "referenceID" : 14,
      "context" : "work used custom neural models trained for their respective downstream generation tasks, including emotion-aware text generation (Ghosh et al., 2017; Ficler and Goldberg, 2017), attribute-aware product review generation (Dong et al.",
      "startOffset" : 129,
      "endOffset" : 176
    }, {
      "referenceID" : 11,
      "context" : "work used custom neural models trained for their respective downstream generation tasks, including emotion-aware text generation (Ghosh et al., 2017; Ficler and Goldberg, 2017), attribute-aware product review generation (Dong et al.",
      "startOffset" : 129,
      "endOffset" : 176
    }, {
      "referenceID" : 8,
      "context" : ", 2017; Ficler and Goldberg, 2017), attribute-aware product review generation (Dong et al., 2017), and friendly or empathetic dialogue response generation (See et al.",
      "startOffset" : 78,
      "endOffset" : 97
    }, {
      "referenceID" : 38,
      "context" : ", 2017), and friendly or empathetic dialogue response generation (See et al., 2019; Rashkin et al., 2019).",
      "startOffset" : 65,
      "endOffset" : 105
    }, {
      "referenceID" : 35,
      "context" : ", 2017), and friendly or empathetic dialogue response generation (See et al., 2019; Rashkin et al., 2019).",
      "startOffset" : 65,
      "endOffset" : 105
    }, {
      "referenceID" : 15,
      "context" : "Training approaches include finetuning the pretrained LMs on datasets that contain the desired attributes (Gururangan et al., 2020) as well as creating a class-conditioned pretrained LM trained on text with specific attributes control code prefixes (Keskar et al.",
      "startOffset" : 106,
      "endOffset" : 131
    }, {
      "referenceID" : 21,
      "context" : ", 2020) as well as creating a class-conditioned pretrained LM trained on text with specific attributes control code prefixes (Keskar et al., 2019).",
      "startOffset" : 125,
      "endOffset" : 146
    }, {
      "referenceID" : 10,
      "context" : "Additionally, training approaches require significant computational resources, which may no longer be feasible with the size of more recent pretrained LMs (Brown et al., 2020; Fedus et al., 2021).",
      "startOffset" : 155,
      "endOffset" : 195
    }, {
      "referenceID" : 25,
      "context" : "Decoding-time methods, a more lightweight approach, have been used controlling the attributes of generated text, as well as for improving its quality (Li et al., 2016; Holtzman et al., 2018; Welleck et al., 2020).",
      "startOffset" : 150,
      "endOffset" : 212
    }, {
      "referenceID" : 17,
      "context" : "Decoding-time methods, a more lightweight approach, have been used controlling the attributes of generated text, as well as for improving its quality (Li et al., 2016; Holtzman et al., 2018; Welleck et al., 2020).",
      "startOffset" : 150,
      "endOffset" : 212
    }, {
      "referenceID" : 43,
      "context" : "Decoding-time methods, a more lightweight approach, have been used controlling the attributes of generated text, as well as for improving its quality (Li et al., 2016; Holtzman et al., 2018; Welleck et al., 2020).",
      "startOffset" : 150,
      "endOffset" : 212
    }, {
      "referenceID" : 5,
      "context" : "PPLM (Dathathri et al., 2020) is a steering method that updates a pretrained model’s hidden representations according to the gradient of a classifier with respect to the desired class.",
      "startOffset" : 5,
      "endOffset" : 29
    }, {
      "referenceID" : 13,
      "context" : "Unfortunately, this approach is computationally expensive, as shown in this and previous work (Gehman et al., 2020).",
      "startOffset" : 94,
      "endOffset" : 115
    }, {
      "referenceID" : 45,
      "context" : "Contemporaneous with our work, FUDGE (Yang and Klein, 2021) trains classifiers on partial sequences to predict whether an attribute will be satisfied in the future, and uses Bayesian factorization to obtain the attribute-conditioned probability distribution.",
      "startOffset" : 37,
      "endOffset" : 59
    }, {
      "referenceID" : 22,
      "context" : "GeDi (Krause et al., 2020) uses Bayes’ rule similarly, but computes classification probabilities using the output of class-conditioned LMs rather than directly training a classifier.",
      "startOffset" : 5,
      "endOffset" : 26
    }, {
      "referenceID" : 0,
      "context" : "Our study is motivated by the potential harms of using pretrained language models (Bender et al., 2021), specifically their tendency to generate hateful, offensive, or toxic content (Sheng et al.",
      "startOffset" : 82,
      "endOffset" : 103
    }, {
      "referenceID" : 39,
      "context" : ", 2021), specifically their tendency to generate hateful, offensive, or toxic content (Sheng et al., 2020; Gehman et al., 2020).",
      "startOffset" : 86,
      "endOffset" : 127
    }, {
      "referenceID" : 13,
      "context" : ", 2021), specifically their tendency to generate hateful, offensive, or toxic content (Sheng et al., 2020; Gehman et al., 2020).",
      "startOffset" : 86,
      "endOffset" : 127
    }, {
      "referenceID" : 20,
      "context" : "However, the mismatch between the construct of toxicity and its operationalization through an automatic classifier can cause biased or unintended model behavior (Jacobs and Wallach, 2021).",
      "startOffset" : 161,
      "endOffset" : 187
    }, {
      "referenceID" : 19,
      "context" : "Specifically, recent work has shown that such hate speech classifiers overestimate the prevalence of toxicity in text that contains a minority identity mention (Hutchinson et al., 2020; Dixon et al., 2018) or text written by racial minorities (Sap et al.",
      "startOffset" : 160,
      "endOffset" : 205
    }, {
      "referenceID" : 7,
      "context" : "Specifically, recent work has shown that such hate speech classifiers overestimate the prevalence of toxicity in text that contains a minority identity mention (Hutchinson et al., 2020; Dixon et al., 2018) or text written by racial minorities (Sap et al.",
      "startOffset" : 160,
      "endOffset" : 205
    }, {
      "referenceID" : 36,
      "context" : ", 2018) or text written by racial minorities (Sap et al., 2019; Davidson et al., 2019), therefore having the real possibility of backfiring against its very aim of fairness and inclusive dialogue.",
      "startOffset" : 45,
      "endOffset" : 86
    }, {
      "referenceID" : 6,
      "context" : ", 2018) or text written by racial minorities (Sap et al., 2019; Davidson et al., 2019), therefore having the real possibility of backfiring against its very aim of fairness and inclusive dialogue.",
      "startOffset" : 45,
      "endOffset" : 86
    }, {
      "referenceID" : 31,
      "context" : "We also acknowledge that any controllable detoxification method runs the risk of dual use (Pandya, 2019), specifically, this technology could be used to automatically generate hateful text (e.",
      "startOffset" : 90,
      "endOffset" : 104
    }, {
      "referenceID" : 30,
      "context" : "We also acknowledge that any controllable detoxification method runs the risk of dual use (Pandya, 2019), specifically, this technology could be used to automatically generate hateful text (e.g., extremist texts; McGuffie and Newhouse, 2020).",
      "startOffset" : 189,
      "endOffset" : 241
    }, {
      "referenceID" : 40,
      "context" : "Nevertheless, toxicity in pretrained LMs is an unsolved issue (Sheng et al., 2019; Gehman et al., 2020).",
      "startOffset" : 62,
      "endOffset" : 103
    }, {
      "referenceID" : 13,
      "context" : "Nevertheless, toxicity in pretrained LMs is an unsolved issue (Sheng et al., 2019; Gehman et al., 2020).",
      "startOffset" : 62,
      "endOffset" : 103
    }, {
      "referenceID" : 4,
      "context" : ", 2020), and to develop systems for mitigating such language that can be personalized to users’ diverse experiences with language (e.g., dealing with reclaimed slurs appropriately; Croom, 2013).",
      "startOffset" : 130,
      "endOffset" : 193
    } ],
    "year" : 2021,
    "abstractText" : "Despite recent advances in natural language generation, it remains challenging to control attributes of generated text. We propose DEXPERTS: Decoding-time Experts, a decodingtime method for controlled text generation that combines a pretrained language model with “expert” LMs and/or “anti-expert” LMs in a product of experts. Intuitively, under the ensemble, tokens only get high probability if they are considered likely by the experts and unlikely by the anti-experts. We apply DEXPERTS to language detoxification and sentiment-controlled generation, where we outperform existing controllable generation methods on both automatic and human evaluations. Moreover, because DEXPERTS operates only on the output of the pretrained LM, it is effective with (anti-)experts of smaller size, including when operating on GPT-3. Our work highlights the promise of tuning small LMs on text with (un)desirable attributes for efficient decoding-time steering.",
    "creator" : "LaTeX with hyperref"
  }
}